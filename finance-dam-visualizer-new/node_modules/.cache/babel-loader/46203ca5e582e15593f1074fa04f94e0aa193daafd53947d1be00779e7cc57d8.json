{"ast":null,"code":"var _jsxFileName = \"/Users/luckyhappyfish/repos/Captial_One_Hack_Knight/finance-dam-visualizer-new/src/components/visualizations/DamVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styled, { keyframes } from 'styled-components';\n\n//\n// -- Container & Basic Layout\n//\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VisualizationContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background: #16213e;\n  padding: 2rem;\n  border-radius: 16px;\n  margin-bottom: 2rem;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n  color: #fff;\n  width: 100%;\n`;\n_c = VisualizationContainer;\nconst Title = styled.h3`\n  margin-bottom: 1rem;\n  text-align: center;\n`;\n_c2 = Title;\nconst Description = styled.p`\n  color: #ccc;\n  text-align: center;\n  max-width: 800px;\n  margin-bottom: 2rem;\n`;\n\n//\n// -- Reservoir and Dam Visual\n//\n_c3 = Description;\nconst ReservoirWrapper = styled.div`\n  position: relative;\n  width: 80%;\n  max-width: 800px;\n  height: ${props => props.height}px;\n  margin-bottom: 2rem;\n  background: linear-gradient(180deg, #1a1a2e 0%, #15213b 70%);\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.5);\n`;\n\n/**\n * The water inside the reservoir uses a clip-path to approximate a curved (parabolic) top.\n */\n_c4 = ReservoirWrapper;\nconst ReservoirWater = styled.div`\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  height: ${props => props.level}%;\n  background: linear-gradient(\n    180deg,\n    rgba(0, 112, 240, 0.8) 0%,\n    rgba(72, 198, 239, 0.6) 100%\n  );\n  box-shadow: inset 0 2px 10px rgba(255, 255, 255, 0.2);\n  transition: height 1s ease-in-out;\n  clip-path: polygon(\n    0% 100%,\n    0% 10%,\n    50% 0%,  /* highest point in the center */\n    100% 10%,\n    100% 100%\n  );\n`;\n\n/**\n * The dam block is placed on the right side.\n */\n_c5 = ReservoirWater;\nconst DamBlock = styled.div`\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  width: 60px;\n  height: 100%;\n  background: #555;\n  box-shadow: inset 0 0 10px rgba(0,0,0,0.6), 0 0 10px rgba(0,0,0,0.8);\n  border-top-left-radius: 12px;\n  border-bottom-left-radius: 12px;\n`;\n\n//\n// -- Animated Water Outflow (vertical line)\n//\n_c6 = DamBlock;\nconst flowDown = keyframes`\n  0% { height: 0; opacity: 0.8; }\n  50% { height: 80%; opacity: 1; }\n  100% { height: 0; opacity: 0; }\n`;\nconst WaterOutflow = styled.div`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  width: 6px;\n  background: rgba(0, 162, 255, 0.8);\n  border-radius: 3px;\n  animation: ${flowDown} 2s linear infinite;\n  transform: translateX(100%);\n`;\n\n//\n// -- Rain for Income\n//\n_c7 = WaterOutflow;\nconst rainFall = keyframes`\n  0% { transform: translateY(0); opacity: 0.8; }\n  100% { transform: translateY(100%); opacity: 0; }\n`;\nconst RainDrop = styled.div`\n  position: absolute;\n  top: ${props => props.top}%;\n  left: ${props => props.left}%;\n  width: 2px;\n  height: 8px;\n  background: rgba(120, 213, 255, 0.8);\n  border-radius: 3px;\n  animation: ${rainFall} ${props => props.duration}s linear infinite;\n  animation-delay: ${props => props.delay}s;\n`;\n_c8 = RainDrop;\nconst RainContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n`;\n\n//\n// -- Money Lines for Outflows (spending)\n//\n_c9 = RainContainer;\nconst moneyFlow = keyframes`\n  0% { transform: scaleY(0); opacity: 0.8; }\n  50% { transform: scaleY(1); opacity: 1; }\n  100% { transform: scaleY(0); opacity: 0; }\n`;\nconst MoneyLine = styled.div`\n  width: 4px;\n  background: ${props => props.color || 'rgba(255,255,255,0.8)'};\n  transform-origin: bottom;\n  animation: ${moneyFlow} 2s linear infinite;\n  height: ${props => props.height}px;\n`;\n_c10 = MoneyLine;\nconst MoneyLineContainer = styled.div`\n  position: absolute;\n  right: 0; /* align with dam block */\n  bottom: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 5px;\n  padding: 5px;\n`;\n\n//\n// -- Legend + Metrics (remain unchanged)\n//\n_c11 = MoneyLineContainer;\nconst Legend = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 1rem;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 12px;\n  padding: 1rem;\n  width: 100%;\n  margin-top: 1rem;\n`;\n_c12 = Legend;\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 1rem;\n  \n  span {\n    width: 12px;\n    height: 12px;\n    background: ${props => props.color};\n    margin-right: 8px;\n    display: inline-block;\n    border-radius: 3px;\n  }\n`;\n_c13 = LegendItem;\nconst FinancialMetrics = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  width: 100%;\n  margin-top: 1rem;\n`;\n_c14 = FinancialMetrics;\nconst MetricCard = styled.div`\n  background: rgba(255, 255, 255, 0.1);\n  padding: 1rem;\n  border-radius: 12px;\n  margin: 0.5rem;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  width: 180px;\n  text-align: center;\n  backdrop-filter: blur(5px);\n  transition: all 0.3s ease;\n  \n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n  }\n  \n  h4 {\n    margin-top: 0;\n    font-size: 0.9rem;\n    font-weight: 500;\n    color: rgba(255, 255, 255, 0.7);\n  }\n  \n  p {\n    font-size: 1.3rem;\n    font-weight: 700;\n    margin-bottom: 0;\n    color: #fff;\n  }\n`;\n\n//\n// -- Main Component\n//\n_c15 = MetricCard;\nconst DamVisualization = ({\n  title = \"Financial Dam\",\n  description = \"A stylized 2D reservoir with a dam, animated water outflow, rain representing income, and money lines representing outflows.\",\n  financialData = {},\n  spendingCategories = [],\n  showMetrics = true,\n  showLegend = true,\n  height = 300\n}) => {\n  _s();\n  const [waterLevel, setWaterLevel] = useState(50);\n  const [incomeRate, setIncomeRate] = useState(5);\n  const [expenseRate, setExpenseRate] = useState(3);\n  const [rainDrops, setRainDrops] = useState([]);\n\n  // Extract financial metrics\n  const {\n    totalAssets = 100000,\n    totalLiabilities = 40000,\n    netWorth = totalAssets - totalLiabilities,\n    monthlyIncome = 5000,\n    monthlyExpenses = 3000\n  } = financialData;\n\n  // Default spending categories (outflows)\n  const defaultSpendingCategories = [{\n    name: 'Housing',\n    color: 'rgba(255, 128, 66, 0.8)',\n    amount: 1200\n  }, {\n    name: 'Food',\n    color: 'rgba(255, 187, 40, 0.8)',\n    amount: 800\n  }, {\n    name: 'Transportation',\n    color: 'rgba(136, 132, 216, 0.8)',\n    amount: 400\n  }, {\n    name: 'Entertainment',\n    color: 'rgba(0, 136, 254, 0.8)',\n    amount: 300\n  }, {\n    name: 'Utilities',\n    color: 'rgba(0, 196, 159, 0.8)',\n    amount: 500\n  }];\n  const categories = spendingCategories.length > 0 ? spendingCategories : defaultSpendingCategories;\n\n  // Helper: compute money line height using a log scale\n  const computeMoneyLineHeight = amount => Math.max(10, Math.log(amount + 1) * 10);\n\n  // Generate rain drops based on income (more income = more rain)\n  const generateRainDrops = () => {\n    const drops = [];\n    // For example, 3 drops per income rate point:\n    const count = incomeRate * 3;\n    for (let i = 0; i < count; i++) {\n      drops.push({\n        id: `rain-${i}`,\n        top: Math.random() * 30,\n        // top 30% of the reservoir area\n        left: Math.random() * 100,\n        // anywhere horizontally\n        duration: 1 + Math.random(),\n        // fall duration between 1-2s\n        delay: Math.random() * 2\n      });\n    }\n    return drops;\n  };\n\n  // Set initial values and update water level over time\n  useEffect(() => {\n    if (totalAssets > 0) {\n      const calculatedLevel = netWorth / totalAssets * 100;\n      setWaterLevel(Math.max(10, Math.min(90, calculatedLevel)));\n    }\n    setIncomeRate(Math.min(10, Math.ceil(monthlyIncome / 1000)));\n    setExpenseRate(Math.min(10, Math.ceil(monthlyExpenses / 1000)));\n    setRainDrops(generateRainDrops());\n\n    // Simulate water level changes based on income and expenses difference\n    const interval = setInterval(() => {\n      setWaterLevel(prev => {\n        const change = (incomeRate - expenseRate) * 0.1;\n        const newLevel = prev + change;\n        return Math.min(Math.max(newLevel, 10), 90);\n      });\n      setRainDrops(generateRainDrops());\n    }, 2000);\n    return () => clearInterval(interval);\n  }, [totalAssets, netWorth, monthlyIncome, monthlyExpenses, incomeRate, expenseRate]);\n  return /*#__PURE__*/_jsxDEV(VisualizationContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Description, {\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReservoirWrapper, {\n      height: height,\n      children: [/*#__PURE__*/_jsxDEV(RainContainer, {\n        children: rainDrops.map(drop => /*#__PURE__*/_jsxDEV(RainDrop, {\n          top: drop.top,\n          left: drop.left,\n          duration: drop.duration,\n          delay: drop.delay\n        }, drop.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ReservoirWater, {\n        level: waterLevel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DamBlock, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(WaterOutflow, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MoneyLineContainer, {\n        children: categories.map(category => /*#__PURE__*/_jsxDEV(MoneyLine, {\n          color: category.color,\n          height: computeMoneyLineHeight(category.amount)\n        }, category.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 13\n    }, this), showLegend && /*#__PURE__*/_jsxDEV(Legend, {\n      children: categories.map(category => /*#__PURE__*/_jsxDEV(LegendItem, {\n        color: category.color,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 29\n        }, this), \" \", category.name, \": $\", category.amount]\n      }, category.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 17\n    }, this), showMetrics && /*#__PURE__*/_jsxDEV(FinancialMetrics, {\n      children: [/*#__PURE__*/_jsxDEV(MetricCard, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Net Worth\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"$\", netWorth.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(MetricCard, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Total Assets\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"$\", totalAssets.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(MetricCard, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Total Liabilities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"$\", totalLiabilities.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(MetricCard, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Monthly Income\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"$\", monthlyIncome.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(MetricCard, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Monthly Expenses\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"$\", monthlyExpenses.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 9\n  }, this);\n};\n_s(DamVisualization, \"joznabi68Q9e1QdWMRfiYtMTNVI=\");\n_c16 = DamVisualization;\nexport default DamVisualization;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n$RefreshReg$(_c, \"VisualizationContainer\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"Description\");\n$RefreshReg$(_c4, \"ReservoirWrapper\");\n$RefreshReg$(_c5, \"ReservoirWater\");\n$RefreshReg$(_c6, \"DamBlock\");\n$RefreshReg$(_c7, \"WaterOutflow\");\n$RefreshReg$(_c8, \"RainDrop\");\n$RefreshReg$(_c9, \"RainContainer\");\n$RefreshReg$(_c10, \"MoneyLine\");\n$RefreshReg$(_c11, \"MoneyLineContainer\");\n$RefreshReg$(_c12, \"Legend\");\n$RefreshReg$(_c13, \"LegendItem\");\n$RefreshReg$(_c14, \"FinancialMetrics\");\n$RefreshReg$(_c15, \"MetricCard\");\n$RefreshReg$(_c16, \"DamVisualization\");","map":{"version":3,"names":["React","useEffect","useState","styled","keyframes","jsxDEV","_jsxDEV","VisualizationContainer","div","_c","Title","h3","_c2","Description","p","_c3","ReservoirWrapper","props","height","_c4","ReservoirWater","level","_c5","DamBlock","_c6","flowDown","WaterOutflow","_c7","rainFall","RainDrop","top","left","duration","delay","_c8","RainContainer","_c9","moneyFlow","MoneyLine","color","_c10","MoneyLineContainer","_c11","Legend","_c12","LegendItem","_c13","FinancialMetrics","_c14","MetricCard","_c15","DamVisualization","title","description","financialData","spendingCategories","showMetrics","showLegend","_s","waterLevel","setWaterLevel","incomeRate","setIncomeRate","expenseRate","setExpenseRate","rainDrops","setRainDrops","totalAssets","totalLiabilities","netWorth","monthlyIncome","monthlyExpenses","defaultSpendingCategories","name","amount","categories","length","computeMoneyLineHeight","Math","max","log","generateRainDrops","drops","count","i","push","id","random","calculatedLevel","min","ceil","interval","setInterval","prev","change","newLevel","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","map","drop","category","toLocaleString","_c16","$RefreshReg$"],"sources":["/Users/luckyhappyfish/repos/Captial_One_Hack_Knight/finance-dam-visualizer-new/src/components/visualizations/DamVisualization.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled, { keyframes } from 'styled-components';\n\n//\n// -- Container & Basic Layout\n//\nconst VisualizationContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background: #16213e;\n  padding: 2rem;\n  border-radius: 16px;\n  margin-bottom: 2rem;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n  color: #fff;\n  width: 100%;\n`;\n\nconst Title = styled.h3`\n  margin-bottom: 1rem;\n  text-align: center;\n`;\n\nconst Description = styled.p`\n  color: #ccc;\n  text-align: center;\n  max-width: 800px;\n  margin-bottom: 2rem;\n`;\n\n//\n// -- Reservoir and Dam Visual\n//\nconst ReservoirWrapper = styled.div`\n  position: relative;\n  width: 80%;\n  max-width: 800px;\n  height: ${props => props.height}px;\n  margin-bottom: 2rem;\n  background: linear-gradient(180deg, #1a1a2e 0%, #15213b 70%);\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.5);\n`;\n\n/**\n * The water inside the reservoir uses a clip-path to approximate a curved (parabolic) top.\n */\nconst ReservoirWater = styled.div`\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  height: ${props => props.level}%;\n  background: linear-gradient(\n    180deg,\n    rgba(0, 112, 240, 0.8) 0%,\n    rgba(72, 198, 239, 0.6) 100%\n  );\n  box-shadow: inset 0 2px 10px rgba(255, 255, 255, 0.2);\n  transition: height 1s ease-in-out;\n  clip-path: polygon(\n    0% 100%,\n    0% 10%,\n    50% 0%,  /* highest point in the center */\n    100% 10%,\n    100% 100%\n  );\n`;\n\n/**\n * The dam block is placed on the right side.\n */\nconst DamBlock = styled.div`\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  width: 60px;\n  height: 100%;\n  background: #555;\n  box-shadow: inset 0 0 10px rgba(0,0,0,0.6), 0 0 10px rgba(0,0,0,0.8);\n  border-top-left-radius: 12px;\n  border-bottom-left-radius: 12px;\n`;\n\n//\n// -- Animated Water Outflow (vertical line)\n//\nconst flowDown = keyframes`\n  0% { height: 0; opacity: 0.8; }\n  50% { height: 80%; opacity: 1; }\n  100% { height: 0; opacity: 0; }\n`;\n\nconst WaterOutflow = styled.div`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  width: 6px;\n  background: rgba(0, 162, 255, 0.8);\n  border-radius: 3px;\n  animation: ${flowDown} 2s linear infinite;\n  transform: translateX(100%);\n`;\n\n//\n// -- Rain for Income\n//\nconst rainFall = keyframes`\n  0% { transform: translateY(0); opacity: 0.8; }\n  100% { transform: translateY(100%); opacity: 0; }\n`;\n\nconst RainDrop = styled.div`\n  position: absolute;\n  top: ${props => props.top}%;\n  left: ${props => props.left}%;\n  width: 2px;\n  height: 8px;\n  background: rgba(120, 213, 255, 0.8);\n  border-radius: 3px;\n  animation: ${rainFall} ${props => props.duration}s linear infinite;\n  animation-delay: ${props => props.delay}s;\n`;\n\nconst RainContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n`;\n\n//\n// -- Money Lines for Outflows (spending)\n//\nconst moneyFlow = keyframes`\n  0% { transform: scaleY(0); opacity: 0.8; }\n  50% { transform: scaleY(1); opacity: 1; }\n  100% { transform: scaleY(0); opacity: 0; }\n`;\n\nconst MoneyLine = styled.div`\n  width: 4px;\n  background: ${props => props.color || 'rgba(255,255,255,0.8)'};\n  transform-origin: bottom;\n  animation: ${moneyFlow} 2s linear infinite;\n  height: ${props => props.height}px;\n`;\n\nconst MoneyLineContainer = styled.div`\n  position: absolute;\n  right: 0; /* align with dam block */\n  bottom: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 5px;\n  padding: 5px;\n`;\n\n//\n// -- Legend + Metrics (remain unchanged)\n//\nconst Legend = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 1rem;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 12px;\n  padding: 1rem;\n  width: 100%;\n  margin-top: 1rem;\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 1rem;\n  \n  span {\n    width: 12px;\n    height: 12px;\n    background: ${props => props.color};\n    margin-right: 8px;\n    display: inline-block;\n    border-radius: 3px;\n  }\n`;\n\nconst FinancialMetrics = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  width: 100%;\n  margin-top: 1rem;\n`;\n\nconst MetricCard = styled.div`\n  background: rgba(255, 255, 255, 0.1);\n  padding: 1rem;\n  border-radius: 12px;\n  margin: 0.5rem;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  width: 180px;\n  text-align: center;\n  backdrop-filter: blur(5px);\n  transition: all 0.3s ease;\n  \n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n  }\n  \n  h4 {\n    margin-top: 0;\n    font-size: 0.9rem;\n    font-weight: 500;\n    color: rgba(255, 255, 255, 0.7);\n  }\n  \n  p {\n    font-size: 1.3rem;\n    font-weight: 700;\n    margin-bottom: 0;\n    color: #fff;\n  }\n`;\n\n//\n// -- Main Component\n//\nconst DamVisualization = ({\n                              title = \"Financial Dam\",\n                              description = \"A stylized 2D reservoir with a dam, animated water outflow, rain representing income, and money lines representing outflows.\",\n                              financialData = {},\n                              spendingCategories = [],\n                              showMetrics = true,\n                              showLegend = true,\n                              height = 300\n                          }) => {\n    const [waterLevel, setWaterLevel] = useState(50);\n    const [incomeRate, setIncomeRate] = useState(5);\n    const [expenseRate, setExpenseRate] = useState(3);\n    const [rainDrops, setRainDrops] = useState([]);\n\n    // Extract financial metrics\n    const {\n        totalAssets = 100000,\n        totalLiabilities = 40000,\n        netWorth = totalAssets - totalLiabilities,\n        monthlyIncome = 5000,\n        monthlyExpenses = 3000\n    } = financialData;\n\n    // Default spending categories (outflows)\n    const defaultSpendingCategories = [\n        { name: 'Housing', color: 'rgba(255, 128, 66, 0.8)', amount: 1200 },\n        { name: 'Food', color: 'rgba(255, 187, 40, 0.8)', amount: 800 },\n        { name: 'Transportation', color: 'rgba(136, 132, 216, 0.8)', amount: 400 },\n        { name: 'Entertainment', color: 'rgba(0, 136, 254, 0.8)', amount: 300 },\n        { name: 'Utilities', color: 'rgba(0, 196, 159, 0.8)', amount: 500 }\n    ];\n    const categories = spendingCategories.length > 0\n        ? spendingCategories\n        : defaultSpendingCategories;\n\n    // Helper: compute money line height using a log scale\n    const computeMoneyLineHeight = amount => Math.max(10, Math.log(amount + 1) * 10);\n\n    // Generate rain drops based on income (more income = more rain)\n    const generateRainDrops = () => {\n        const drops = [];\n        // For example, 3 drops per income rate point:\n        const count = incomeRate * 3;\n        for (let i = 0; i < count; i++) {\n            drops.push({\n                id: `rain-${i}`,\n                top: Math.random() * 30, // top 30% of the reservoir area\n                left: Math.random() * 100, // anywhere horizontally\n                duration: 1 + Math.random(), // fall duration between 1-2s\n                delay: Math.random() * 2\n            });\n        }\n        return drops;\n    };\n\n    // Set initial values and update water level over time\n    useEffect(() => {\n        if (totalAssets > 0) {\n            const calculatedLevel = (netWorth / totalAssets) * 100;\n            setWaterLevel(Math.max(10, Math.min(90, calculatedLevel)));\n        }\n        setIncomeRate(Math.min(10, Math.ceil(monthlyIncome / 1000)));\n        setExpenseRate(Math.min(10, Math.ceil(monthlyExpenses / 1000)));\n        setRainDrops(generateRainDrops());\n\n        // Simulate water level changes based on income and expenses difference\n        const interval = setInterval(() => {\n            setWaterLevel(prev => {\n                const change = (incomeRate - expenseRate) * 0.1;\n                const newLevel = prev + change;\n                return Math.min(Math.max(newLevel, 10), 90);\n            });\n            setRainDrops(generateRainDrops());\n        }, 2000);\n\n        return () => clearInterval(interval);\n    }, [totalAssets, netWorth, monthlyIncome, monthlyExpenses, incomeRate, expenseRate]);\n\n    return (\n        <VisualizationContainer>\n            <Title>{title}</Title>\n            <Description>{description}</Description>\n\n            <ReservoirWrapper height={height}>\n                {/* Rain overlay for income */}\n                <RainContainer>\n                    {rainDrops.map(drop => (\n                        <RainDrop\n                            key={drop.id}\n                            top={drop.top}\n                            left={drop.left}\n                            duration={drop.duration}\n                            delay={drop.delay}\n                        />\n                    ))}\n                </RainContainer>\n\n                {/* Water inside the reservoir */}\n                <ReservoirWater level={waterLevel} />\n\n                {/* The dam block */}\n                <DamBlock />\n\n                {/* Animated water outflow */}\n                <WaterOutflow />\n\n                {/* Money lines representing spending (outflows) */}\n                <MoneyLineContainer>\n                    {categories.map(category => (\n                        <MoneyLine\n                            key={category.name}\n                            color={category.color}\n                            height={computeMoneyLineHeight(category.amount)}\n                        />\n                    ))}\n                </MoneyLineContainer>\n            </ReservoirWrapper>\n\n            {showLegend && (\n                <Legend>\n                    {categories.map(category => (\n                        <LegendItem key={category.name} color={category.color}>\n                            <span /> {category.name}: ${category.amount}\n                        </LegendItem>\n                    ))}\n                </Legend>\n            )}\n\n            {showMetrics && (\n                <FinancialMetrics>\n                    <MetricCard>\n                        <h4>Net Worth</h4>\n                        <p>${netWorth.toLocaleString()}</p>\n                    </MetricCard>\n                    <MetricCard>\n                        <h4>Total Assets</h4>\n                        <p>${totalAssets.toLocaleString()}</p>\n                    </MetricCard>\n                    <MetricCard>\n                        <h4>Total Liabilities</h4>\n                        <p>${totalLiabilities.toLocaleString()}</p>\n                    </MetricCard>\n                    <MetricCard>\n                        <h4>Monthly Income</h4>\n                        <p>${monthlyIncome.toLocaleString()}</p>\n                    </MetricCard>\n                    <MetricCard>\n                        <h4>Monthly Expenses</h4>\n                        <p>${monthlyExpenses.toLocaleString()}</p>\n                    </MetricCard>\n                </FinancialMetrics>\n            )}\n        </VisualizationContainer>\n    );\n};\n\nexport default DamVisualization;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}