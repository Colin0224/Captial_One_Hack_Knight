{"ast":null,"code":"var _jsxFileName = \"/Users/franksu/Documents/Personal projects /hackathon 1 /Captial_One_Hack_Knight/finance-dam-visualizer-new/src/components/visualizations/DamVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styled, { keyframes, css } from 'styled-components';\n\n//\n// -- Container & Basic Layout\n//\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VisualizationContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background: linear-gradient(135deg, #0f2027 0%, #203a43 50%, #2c5364 100%);\n  padding: 2.5rem;\n  border-radius: 20px;\n  margin-bottom: 2.5rem;\n  box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);\n  color: #fff;\n  width: 100%;\n`;\n_c = VisualizationContainer;\nconst Title = styled.h3`\n  margin-bottom: 1rem;\n  text-align: center;\n  font-size: 1.8rem;\n  font-weight: 700;\n  background: linear-gradient(90deg, #4facfe 0%, #00f2fe 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n`;\n_c2 = Title;\nconst Description = styled.p`\n  color: #eef2f7;\n  text-align: center;\n  max-width: 800px;\n  margin-bottom: 2.5rem;\n  line-height: 1.6;\n  font-size: 1.1rem;\n`;\n\n//\n// -- Enhanced Dashboard Layout\n//\n_c3 = Description;\nconst DashboardLayout = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  width: 100%;\n  gap: 2rem;\n  \n  @media (min-width: 992px) {\n    grid-template-columns: 2fr 1fr;\n  }\n`;\n_c4 = DashboardLayout;\nconst VisualizationSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n_c5 = VisualizationSection;\nconst BreakdownSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n`;\n\n//\n// -- Status Indicators\n//\n_c6 = BreakdownSection;\nconst StatusIndicator = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n  background: rgba(255, 255, 255, 0.08);\n  border-radius: 12px;\n  margin-bottom: 1rem;\n  backdrop-filter: blur(8px);\n`;\n_c7 = StatusIndicator;\nconst StatusLabel = styled.div`\n  display: flex;\n  align-items: center;\n  \n  span {\n    font-weight: 600;\n    margin-left: 0.5rem;\n  }\n`;\n_c8 = StatusLabel;\nconst StatusValue = styled.div`\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: ${props => {\n  if (props.status === 'positive') return '#4cd964';\n  if (props.status === 'negative') return '#ff3b30';\n  if (props.status === 'neutral') return '#ffcc00';\n  return '#fff';\n}};\n`;\n\n//\n// -- Reservoir and Dam Visual (Enhanced)\n//\n_c9 = StatusValue;\nconst ReservoirWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  max-width: 800px;\n  height: ${props => props.height}px;\n  margin-bottom: 2rem;\n  background: linear-gradient(180deg, #1a1a2e 0%, #1f3a63 100%);\n  border-radius: 20px;\n  overflow: hidden;\n  box-shadow: \n    inset 0 0 20px rgba(0, 0, 0, 0.5),\n    0 8px 16px rgba(0, 0, 0, 0.2);\n`;\n_c10 = ReservoirWrapper;\nconst waterShimmer = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`;\n\n/**\n * Enhanced water with shimmer and waves\n */\nconst ReservoirWater = styled.div`\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  height: ${props => props.level}%;\n  background: linear-gradient(\n    180deg,\n    rgba(0, 150, 255, 0.8) 0%,\n    rgba(72, 198, 239, 0.7) 100%\n  );\n  background-size: 200% 200%;\n  animation: ${waterShimmer} 5s ease infinite;\n  box-shadow: \n    inset 0 2px 15px rgba(255, 255, 255, 0.3),\n    0 0 10px rgba(0, 150, 255, 0.5);\n  transition: height 1s ease-in-out;\n  clip-path: polygon(\n    0% 100%,\n    0% 10%,\n    25% 5%,\n    50% 0%,  /* highest point in the center */\n    75% 5%,\n    100% 10%,\n    100% 100%\n  );\n  \n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 15px;\n    background: rgba(255, 255, 255, 0.3);\n    border-radius: 50%;\n    filter: blur(3px);\n  }\n`;\n_c11 = ReservoirWater;\nconst WaterLevelLabel = styled.div`\n  position: absolute;\n  right: 80px;\n  color: white;\n  font-weight: bold;\n  text-shadow: 0 0 8px rgba(0, 0, 0, 0.7);\n  padding: 4px 10px;\n  border-radius: 12px;\n  background: rgba(0, 0, 0, 0.3);\n  font-size: 0.9rem;\n  bottom: ${props => props.level}%;\n  transform: translateY(50%);\n  transition: bottom 1s ease-in-out;\n`;\n\n/**\n * Enhanced dam block with texture and gates\n */\n_c12 = WaterLevelLabel;\nconst DamBlock = styled.div`\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  width: 70px;\n  height: 100%;\n  background: linear-gradient(90deg, #444 0%, #666 50%, #555 100%);\n  box-shadow: \n    inset 0 0 20px rgba(0,0,0,0.8), \n    -5px 0 15px rgba(0,0,0,0.5);\n  border-top-left-radius: 15px;\n  border-bottom-left-radius: 5px;\n  \n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-image: repeating-linear-gradient(\n      0deg,\n      rgba(255, 255, 255, 0.1),\n      rgba(255, 255, 255, 0.1) 2px,\n      transparent 2px,\n      transparent 8px\n    );\n  }\n`;\n_c13 = DamBlock;\nconst DamGate = styled.div`\n  position: absolute;\n  right: 0;\n  width: 70px;\n  height: ${props => props.gateSize || 20}px;\n  background: #333;\n  box-shadow: inset 0 0 10px rgba(0,0,0,0.8);\n  border-top-left-radius: 5px;\n  border-bottom-left-radius: 5px;\n  border-left: 2px solid rgba(255, 255, 255, 0.2);\n  bottom: ${props => props.position}%;\n  overflow: visible;\n  \n  &::before {\n    content: '';\n    position: absolute;\n    left: 10px;\n    top: 50%;\n    width: 8px;\n    height: 8px;\n    background: ${props => props.isOpen ? '#4cd964' : '#ff3b30'};\n    border-radius: 50%;\n    transform: translateY(-50%);\n    box-shadow: 0 0 10px ${props => props.isOpen ? 'rgba(76, 217, 100, 0.7)' : 'rgba(255, 59, 48, 0.7)'};\n  }\n  \n  /* Opening in the dam */\n  &::after {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(\n      to right,\n      rgba(0, 0, 0, 0.9),\n      rgba(0, 0, 0, 0.5)\n    );\n    border-top-left-radius: 5px;\n    border-bottom-left-radius: 5px;\n  }\n`;\n\n//\n// -- Animated Water Flows\n//\n// No arrow animations needed\n_c14 = DamGate;\nconst WaterOutflow = styled.div`\n  position: absolute;\n  bottom: ${props => props.position}%;\n  right: 0; /* Align exactly with the dam wall */\n  height: ${props => props.thickness || 8}px;\n  width: ${props => props.isZero ? '15px' : '80px'}; /* Shorter bar for zero expenses */\n  background: ${props => {\n  if (props.isZero) {\n    // For zero expenses, use dotted pattern\n    return props.color ? `repeating-linear-gradient(90deg, ${props.color.replace('0.8', '0.4')}, ${props.color.replace('0.8', '0.4')} 2px, transparent 2px, transparent 4px)` : 'repeating-linear-gradient(90deg, rgba(100, 100, 100, 0.4), rgba(100, 100, 100, 0.4) 2px, transparent 2px, transparent 4px)';\n  } else {\n    // Normal gradient for expenses > 0\n    return props.color ? `linear-gradient(to right, ${props.color.replace('0.8', '0.9')}, ${props.color.replace('0.8', '0.5')})` : 'linear-gradient(to right, rgba(60, 180, 255, 0.9), rgba(72, 198, 239, 0.7))';\n  }\n}};\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n  box-shadow: ${props => props.isZero ? 'none' : `5px 0 8px ${props.color ? props.color.replace('0.8', '0.5') : 'rgba(0, 162, 255, 0.5)'}`};\n  opacity: ${props => props.isZero ? 0.7 : 0.9};\n  z-index: 5;\n  transform: translateX(0); /* Ensure no leaking into dam */\n  \n  &::after {\n    content: attr(data-tooltip);\n    position: absolute;\n    top: -22px;\n    left: 10px;\n    background: rgba(0, 0, 0, 0.7);\n    color: white;\n    padding: 3px 8px;\n    border-radius: 4px;\n    font-size: 0.75rem;\n    white-space: nowrap;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n    z-index: 10;\n  }\n  \n  &:hover::after {\n    opacity: 1;\n  }\n`;\n\n//\n// -- Enhanced Rain for Income\n//\n_c15 = WaterOutflow;\nconst rainFall = keyframes`\n  0% { transform: translateY(0); opacity: 0.9; }\n  50% { opacity: 1; }\n  100% { transform: translateY(100%); opacity: 0; }\n`;\nconst RainDrop = styled.div`\n  position: absolute;\n  top: ${props => props.top}%;\n  left: ${props => props.left}%;\n  width: ${props => props.size || 2}px;\n  height: ${props => (props.size || 2) * 4}px;\n  background: rgba(160, 230, 255, 0.9);\n  border-radius: 3px;\n  animation: ${rainFall} ${props => props.duration}s linear infinite;\n  animation-delay: ${props => props.delay}s;\n  box-shadow: 0 0 5px rgba(160, 230, 255, 0.5);\n`;\n_c16 = RainDrop;\nconst RainContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n`;\n\n//\n// -- Enhanced Money Lines for Outflows (spending)\n//\n_c17 = RainContainer;\nconst moneyFlow = keyframes`\n  0% { \n    width: 0; \n    opacity: 0.8;\n    transform: translateX(0);\n  }\n  50% { \n    width: 100px; \n    opacity: 1;\n    transform: translateX(40px);\n  }\n  100% { \n    width: 30px; \n    opacity: 0;\n    transform: translateX(120px);\n  }\n`;\nconst MoneyLine = styled.div`\n  height: 5px;\n  background: ${props => props.color || 'rgba(255,255,255,0.8)'};\n  transform-origin: left;\n  animation: ${moneyFlow} ${props => 2 + Math.random()}s linear infinite;\n  width: ${props => Math.min(120, props.width || 50)}px;\n  border-radius: 3px;\n  box-shadow: 0 0 8px ${props => props.color ? props.color.replace('0.8', '0.5') : 'rgba(255,255,255,0.5)'};\n  position: relative;\n  \n  &::after {\n    content: '${props => props.label}';\n    position: absolute;\n    top: -20px;\n    left: 0;\n    background: rgba(0, 0, 0, 0.7);\n    color: white;\n    padding: 2px 6px;\n    border-radius: 4px;\n    font-size: 0.7rem;\n    white-space: nowrap;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n  \n  &:hover::after {\n    opacity: 1;\n  }\n`;\nconst MoneyLineContainer = styled.div`\n  position: absolute;\n  right: 70px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 5px;\n  height: 100%;\n`;\n\n//\n// -- Enhanced Legend and Charts\n//\nconst Legend = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n  gap: 1rem;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 12px;\n  padding: 1rem;\n  width: 100%;\n  margin-top: 1.5rem;\n  backdrop-filter: blur(8px);\n`;\n_c18 = Legend;\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 0.5rem;\n  border-radius: 8px;\n  background: rgba(255, 255, 255, 0.05);\n  transition: all 0.3s ease;\n  \n  &:hover {\n    background: rgba(255, 255, 255, 0.1);\n    transform: translateY(-2px);\n  }\n  \n  span {\n    width: 14px;\n    height: 14px;\n    background: ${props => props.color};\n    margin-right: 10px;\n    display: inline-block;\n    border-radius: 4px;\n    box-shadow: 0 0 8px ${props => props.color.replace('0.8', '0.5')};\n  }\n  \n  .amount {\n    margin-left: auto;\n    font-weight: 700;\n    color: #fff;\n  }\n  \n  .percent {\n    font-size: 0.8rem;\n    color: rgba(255, 255, 255, 0.7);\n    margin-left: 8px;\n  }\n`;\n_c19 = LegendItem;\nconst progressAnimation = keyframes`\n  from { width: 0; }\n  to { width: var(--target-width); }\n`;\nconst CategoryBreakdown = styled.div`\n  background: rgba(255, 255, 255, 0.08);\n  border-radius: 12px;\n  padding: 1.5rem;\n  width: 100%;\n`;\n_c20 = CategoryBreakdown;\nconst BreakdownTitle = styled.h4`\n  font-size: 1.2rem;\n  margin-bottom: 1rem;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n  padding-bottom: 0.5rem;\n`;\n_c21 = BreakdownTitle;\nconst CategoryBar = styled.div`\n  margin-bottom: 0.8rem;\n  \n  .label {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 0.3rem;\n    \n    .name {\n      font-weight: 500;\n    }\n    \n    .value {\n      font-weight: 600;\n    }\n  }\n  \n  .bar {\n    height: 12px;\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 6px;\n    overflow: hidden;\n    position: relative;\n    \n    .fill {\n      position: absolute;\n      height: 100%;\n      background: ${props => props.color};\n      border-radius: 6px;\n      width: 0;\n      --target-width: ${props => props.percentage}%;\n      animation: ${progressAnimation} 1.5s ease forwards;\n      box-shadow: 0 0 10px ${props => props.color.replace('0.8', '0.4')};\n    }\n  }\n`;\n\n//\n// -- Financial Metrics (Enhanced)\n//\n_c22 = CategoryBar;\nconst FinancialMetrics = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n  gap: 1rem;\n  width: 100%;\n  margin-top: 1.5rem;\n`;\n_c23 = FinancialMetrics;\nconst MetricCard = styled.div`\n  background: rgba(255, 255, 255, 0.08);\n  padding: 1.2rem;\n  border-radius: 16px;\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);\n  text-align: center;\n  backdrop-filter: blur(8px);\n  transition: all 0.3s ease;\n  border-top: 3px solid ${props => props.color || 'rgba(0, 162, 255, 0.8)'};\n  \n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 12px 20px rgba(0, 0, 0, 0.2);\n  }\n  \n  h4 {\n    margin-top: 0;\n    font-size: 0.9rem;\n    font-weight: 500;\n    color: rgba(255, 255, 255, 0.8);\n    margin-bottom: 0.5rem;\n  }\n  \n  p {\n    font-size: 1.4rem;\n    font-weight: 700;\n    margin-bottom: 0.5rem;\n    color: ${props => props.textColor || '#fff'};\n  }\n  \n  .change {\n    font-size: 0.8rem;\n    color: ${props => props.changeColor || '#4cd964'};\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    \n    svg {\n      margin-right: 0.3rem;\n    }\n  }\n`;\n_c24 = MetricCard;\nconst DonutChart = styled.div`\n  width: 100%;\n  padding: 1.5rem;\n  background: rgba(255, 255, 255, 0.08);\n  border-radius: 16px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n_c25 = DonutChart;\nconst DonutSvg = styled.svg`\n  width: 160px;\n  height: 160px;\n  transform: rotate(-90deg);\n`;\n\n//\n// -- Main Component (Enhanced)\n//\n_c26 = DonutSvg;\nconst DamVisualization = ({\n  title = \"Financial Dam\",\n  description = \"A stylized 2D reservoir with a dam, animated water outflow, rain representing income, and money lines representing outflows.\",\n  financialData = {},\n  spendingCategories = [],\n  showMetrics = true,\n  showLegend = true,\n  height = 350\n}) => {\n  _s();\n  const [waterLevel, setWaterLevel] = useState(50);\n  const [incomeRate, setIncomeRate] = useState(5);\n  const [expenseRate, setExpenseRate] = useState(3);\n  const [rainDrops, setRainDrops] = useState([]);\n  const [damGates, setDamGates] = useState([]);\n  const [waterFlows, setWaterFlows] = useState([]);\n  const [cashFlowStatus, setCashFlowStatus] = useState('neutral');\n\n  // Extract financial metrics\n  const {\n    totalAssets = 100000,\n    totalLiabilities = 40000,\n    netWorth = totalAssets - totalLiabilities,\n    monthlyIncome = 5000,\n    monthlyExpenses = 3000\n  } = financialData;\n\n  // Calculate monthly cash flow\n  const monthlyCashFlow = monthlyIncome - monthlyExpenses;\n  const cashFlowRatio = (monthlyCashFlow / monthlyIncome * 100).toFixed(1);\n\n  // Default spending categories (outflows)\n  const defaultSpendingCategories = [{\n    name: 'Housing',\n    color: 'rgba(255, 128, 66, 0.8)',\n    amount: 1200\n  }, {\n    name: 'Food',\n    color: 'rgba(255, 187, 40, 0.8)',\n    amount: 800\n  }, {\n    name: 'Transportation',\n    color: 'rgba(136, 132, 216, 0.8)',\n    amount: 400\n  }, {\n    name: 'Entertainment',\n    color: 'rgba(0, 136, 254, 0.8)',\n    amount: 300\n  }, {\n    name: 'Utilities',\n    color: 'rgba(0, 196, 159, 0.8)',\n    amount: 500\n  }];\n\n  // Always use default categories as a base, then override/add with any provided categories\n  // This ensures all standard categories are always present\n  let categories = [...defaultSpendingCategories];\n\n  // If custom categories were provided, merge them with defaults\n  if (spendingCategories.length > 0) {\n    // For each provided category, replace the default or add it\n    spendingCategories.forEach(customCat => {\n      const existingIndex = categories.findIndex(cat => cat.name === customCat.name);\n      if (existingIndex >= 0) {\n        // Replace existing category\n        categories[existingIndex] = customCat;\n      } else {\n        // Add new category\n        categories.push(customCat);\n      }\n    });\n  }\n\n  // Make sure Entertainment is always included\n  if (!categories.some(cat => cat.name === 'Entertainment')) {\n    categories.push({\n      name: 'Entertainment',\n      color: 'rgba(0, 136, 254, 0.8)',\n      amount: 300 // Default amount\n    });\n  }\n\n  // Calculate percentages for each spending category\n  const totalSpending = categories.reduce((sum, cat) => sum + cat.amount, 0);\n  const categoriesWithPercentage = categories.map(cat => ({\n    ...cat,\n    percentage: (cat.amount / totalSpending * 100).toFixed(1)\n  }));\n\n  // Sort categories by amount (descending)\n  const sortedCategories = [...categoriesWithPercentage].sort((a, b) => b.amount - a.amount);\n\n  // Helper: compute money line width using a log scale with better distribution\n  const computeMoneyLineWidth = amount => {\n    const maxWidth = 120; // Maximum width of the flow\n    const maxAmount = Math.max(...categories.map(c => c.amount));\n    return Math.max(30, amount / maxAmount * maxWidth);\n  };\n\n  // Generate rain drops based on income (more income = more rain)\n  const generateRainDrops = () => {\n    const drops = [];\n    // Increase rain density based on income rate\n    const count = Math.min(30, incomeRate * 4);\n    for (let i = 0; i < count; i++) {\n      drops.push({\n        id: `rain-${i}`,\n        top: Math.random() * 20,\n        // top 20% of the reservoir area\n        left: Math.random() * 100,\n        // anywhere horizontally\n        duration: 0.8 + Math.random(),\n        // fall duration between 0.8-1.8s\n        delay: Math.random() * 2,\n        size: Math.random() > 0.7 ? 3 : 2 // Some drops are larger\n      });\n    }\n    return drops;\n  };\n\n  // Generate dam gates based on all spending categories with equal spacing along entire dam height\n  const generateDamGates = () => {\n    // Define key required categories\n    const requiredCategories = ['Housing', 'Food', 'Transportation', 'Entertainment', 'Utilities'];\n\n    // Start with all categories\n    let categoriesToUse = [...sortedCategories];\n\n    // If Entertainment is not in the sorted categories, make sure to explicitly add it\n    const hasEntertainment = categoriesToUse.some(cat => cat.name === 'Entertainment');\n    if (!hasEntertainment) {\n      // Add entertainment with 0 amount by default\n      categoriesToUse.push({\n        name: 'Entertainment',\n        color: 'rgba(0, 136, 254, 0.8)',\n        amount: 0,\n        // Set to 0 to fix the bug\n        percentage: '0.0'\n      });\n    }\n\n    // Ensure all required categories are included\n    for (const reqCategory of requiredCategories) {\n      if (!categoriesToUse.some(cat => cat.name === reqCategory)) {\n        // Find default values for this category\n        const defaultCategory = defaultSpendingCategories.find(c => c.name === reqCategory);\n        if (defaultCategory) {\n          categoriesToUse.push({\n            ...defaultCategory,\n            percentage: (defaultCategory.amount / totalSpending * 100).toFixed(1)\n          });\n        }\n      }\n    }\n\n    // Use all available categories\n    const gates = [];\n\n    // Calculate the usable height of the dam (using full height, no margins)\n    const usableHeight = 100; // Use 100% of the dam height\n    const startPosition = 0; // Start at 0% from the bottom\n\n    // Calculate equal spacing for the gates\n    const totalSpace = usableHeight;\n    const spacing = totalSpace / categoriesToUse.length;\n\n    // Create a gate for each spending category with equal distribution\n    for (let i = 0; i < categoriesToUse.length; i++) {\n      const category = categoriesToUse[i];\n\n      // Size gate based on a fixed percentage of spacing\n      const gateSize = Math.max(10, Math.min(spacing * 0.7, 20));\n\n      // Calculate position with equal spacing\n      const position = startPosition + i * spacing + spacing / 2 - gateSize / 2;\n      gates.push({\n        id: `gate-${i + 1}`,\n        position: position,\n        isOpen: category.amount > 0,\n        // Only open if amount > 0\n        gateSize: gateSize,\n        category: category.name,\n        amount: category.amount,\n        color: category.color\n      });\n    }\n    return gates;\n  };\n\n  // Generate water outflows for ALL gates, showing different appearances based on amount\n  const generateWaterFlows = gates => {\n    const flows = [];\n    gates.forEach(gate => {\n      const basePosition = gate.position;\n\n      // Make sure the bar is exactly the same height as the gate opening\n      const thickness = gate.gateSize * 0.96; // Slightly smaller than gate height to fit perfectly\n\n      // Center the bar vertically in the gate\n      const adjustedPosition = basePosition + (gate.gateSize - thickness) / 2;\n\n      // For zero amount expenses, display a gate without flow\n      if (gate.amount <= 0) {\n        // Create a special \"zero flow\" indicator\n        flows.push({\n          id: `flow-${gate.id}`,\n          position: adjustedPosition,\n          thickness: thickness,\n          color: gate.color,\n          label: gate.category,\n          amount: 0,\n          isZero: true\n        });\n      } else {\n        // Create normal flow for non-zero expenses\n        flows.push({\n          id: `flow-${gate.id}`,\n          position: adjustedPosition,\n          thickness: thickness,\n          color: gate.color,\n          label: gate.category,\n          amount: gate.amount,\n          isZero: false\n        });\n      }\n    });\n    console.log(\"Generated flows:\", flows.map(f => `${f.label}: ${f.amount}${f.isZero ? ' (zero)' : ''}`));\n    return flows;\n  };\n\n  // Set initial values and update water level to represent net worth (assets - liabilities)\n  useEffect(() => {\n    // Calculate water level based on net worth as percentage of total assets\n    // If net worth is negative, water level will be very low\n    if (totalAssets > 0) {\n      // Net worth as percentage of total assets (clamp between 10-90%)\n      const netWorthPercentage = netWorth / totalAssets * 100;\n      setWaterLevel(Math.max(10, Math.min(90, netWorthPercentage)));\n    } else {\n      setWaterLevel(10); // Minimum level if no assets\n    }\n    setIncomeRate(Math.min(10, Math.ceil(monthlyIncome / 1000)));\n    setExpenseRate(Math.min(10, Math.ceil(monthlyExpenses / 1000)));\n    setRainDrops(generateRainDrops());\n    const gates = generateDamGates();\n    setDamGates(gates);\n    setWaterFlows(generateWaterFlows(gates));\n\n    // Set cash flow status for color indicators\n    if (monthlyCashFlow > 0) {\n      setCashFlowStatus('positive');\n    } else if (monthlyCashFlow < 0) {\n      setCashFlowStatus('negative');\n    } else {\n      setCashFlowStatus('neutral');\n    }\n\n    // No need for animated level changes since we're showing actual net worth\n    // Just update raindrops periodically\n    const interval = setInterval(() => {\n      setRainDrops(generateRainDrops());\n    }, 2000);\n    return () => clearInterval(interval);\n  }, [totalAssets, netWorth, monthlyIncome, monthlyExpenses, monthlyCashFlow]);\n\n  // Format currency for display\n  const formatCurrency = amount => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  // Setup donut chart data and calculations\n  const prepareDonutChartData = () => {\n    let currentOffset = 0;\n    return sortedCategories.map(category => {\n      const percentage = parseFloat(category.percentage);\n      const dashArray = 2 * Math.PI * 25 * percentage / 100;\n      const gap = 2 * Math.PI * 25 * (100 - percentage) / 100;\n      const startOffset = -currentOffset;\n      currentOffset += dashArray;\n      return {\n        ...category,\n        dashArray,\n        gap,\n        strokeDasharray: `${dashArray} ${gap}`,\n        strokeDashoffset: startOffset\n      };\n    });\n  };\n  const donutData = prepareDonutChartData();\n  return /*#__PURE__*/_jsxDEV(VisualizationContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 880,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Description, {\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 881,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DashboardLayout, {\n      children: [/*#__PURE__*/_jsxDEV(VisualizationSection, {\n        children: [/*#__PURE__*/_jsxDEV(StatusIndicator, {\n          children: [/*#__PURE__*/_jsxDEV(StatusLabel, {\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              width: \"20\",\n              height: \"20\",\n              viewBox: \"0 0 24 24\",\n              fill: \"none\",\n              xmlns: \"http://www.w3.org/2000/svg\",\n              children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M13 5.07C16.93 5.56 20 8.92 20 13C20 17.42 16.42 21 12 21C7.58 21 4 17.42 4 13C4 8.92 7.07 5.56 11 5.07V3H13V5.07Z\",\n                stroke: \"white\",\n                strokeWidth: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 888,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M12 8V13H17\",\n                stroke: \"white\",\n                strokeWidth: \"2\",\n                strokeLinecap: \"round\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 889,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 887,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Cash Flow Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 891,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 886,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(StatusValue, {\n            status: cashFlowStatus,\n            children: cashFlowStatus === 'positive' ? `+${formatCurrency(monthlyCashFlow)} (+${cashFlowRatio}%)` : cashFlowStatus === 'negative' ? `${formatCurrency(monthlyCashFlow)} (${cashFlowRatio}%)` : `${formatCurrency(monthlyCashFlow)} (0%)`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 893,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 885,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReservoirWrapper, {\n          height: height,\n          children: [/*#__PURE__*/_jsxDEV(RainContainer, {\n            children: rainDrops.map(drop => /*#__PURE__*/_jsxDEV(RainDrop, {\n              top: drop.top,\n              left: drop.left,\n              duration: drop.duration,\n              delay: drop.delay,\n              size: drop.size\n            }, drop.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 904,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 902,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ReservoirWater, {\n            level: waterLevel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 916,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(WaterLevelLabel, {\n            level: waterLevel,\n            children: [\"Net Worth: \", waterLevel.toFixed(0), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 917,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DamBlock, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 922,\n            columnNumber: 25\n          }, this), damGates.map(gate => /*#__PURE__*/_jsxDEV(DamGate, {\n            position: gate.position,\n            isOpen: gate.isOpen,\n            gateSize: gate.gateSize\n          }, gate.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 926,\n            columnNumber: 29\n          }, this)), waterFlows.map(flow => /*#__PURE__*/_jsxDEV(WaterOutflow, {\n            position: flow.position,\n            thickness: flow.thickness,\n            color: flow.color,\n            isZero: flow.isZero,\n            \"data-tooltip\": `${flow.label}: ${formatCurrency(flow.amount)}`\n          }, flow.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 936,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 900,\n          columnNumber: 21\n        }, this), showMetrics && /*#__PURE__*/_jsxDEV(FinancialMetrics, {\n          children: [/*#__PURE__*/_jsxDEV(MetricCard, {\n            color: \"rgba(0, 196, 159, 0.8)\",\n            textColor: netWorth >= 0 ? '#4cd964' : '#ff3b30',\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Net Worth\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 952,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: formatCurrency(netWorth)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 953,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"change\",\n              children: [netWorth >= 0 ? /*#__PURE__*/_jsxDEV(\"svg\", {\n                width: \"12\",\n                height: \"12\",\n                viewBox: \"0 0 24 24\",\n                fill: \"none\",\n                xmlns: \"http://www.w3.org/2000/svg\",\n                children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M7 17L12 12L17 17\",\n                  stroke: \"#4cd964\",\n                  strokeWidth: \"2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 957,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M12 12V20\",\n                  stroke: \"#4cd964\",\n                  strokeWidth: \"2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 958,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 956,\n                columnNumber: 41\n              }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n                width: \"12\",\n                height: \"12\",\n                viewBox: \"0 0 24 24\",\n                fill: \"none\",\n                xmlns: \"http://www.w3.org/2000/svg\",\n                children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M7 7L12 12L17 7\",\n                  stroke: \"#ff3b30\",\n                  strokeWidth: \"2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 961,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M12 12V4\",\n                  stroke: \"#ff3b30\",\n                  strokeWidth: \"2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 962,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 960,\n                columnNumber: 41\n              }, this), (netWorth / totalAssets * 100).toFixed(1), \"% of Assets\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 954,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 951,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(MetricCard, {\n            color: \"rgba(0, 136, 254, 0.8)\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Total Assets\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 969,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: formatCurrency(totalAssets)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 970,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"change\",\n              style: {\n                color: 'rgba(255, 255, 255, 0.6)'\n              },\n              children: \"Net Positive\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 971,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 968,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(MetricCard, {\n            color: \"rgba(255, 128, 66, 0.8)\",\n            textColor: \"#ff3b30\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Total Liabilities\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 976,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: formatCurrency(totalLiabilities)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 977,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"change\",\n              style: {\n                color: 'rgba(255, 255, 255, 0.6)'\n              },\n              children: [(totalLiabilities / totalAssets * 100).toFixed(1), \"% of Assets\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 978,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 975,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(MetricCard, {\n            color: \"rgba(72, 198, 239, 0.8)\",\n            textColor: \"#4cd964\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Monthly Income\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 983,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: formatCurrency(monthlyIncome)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 984,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"change\",\n              style: {\n                color: 'rgba(255, 255, 255, 0.6)'\n              },\n              children: \"Regular Inflow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 985,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 982,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(MetricCard, {\n            color: \"rgba(255, 187, 40, 0.8)\",\n            textColor: \"#ffcc00\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Monthly Expenses\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 990,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: formatCurrency(monthlyExpenses)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 991,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"change\",\n              style: {\n                color: cashFlowStatus === 'positive' ? '#4cd964' : '#ff3b30'\n              },\n              children: [(monthlyExpenses / monthlyIncome * 100).toFixed(1), \"% of Income\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 992,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 989,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 950,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 884,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BreakdownSection, {\n        children: [/*#__PURE__*/_jsxDEV(DonutChart, {\n          children: [/*#__PURE__*/_jsxDEV(BreakdownTitle, {\n            children: \"Expense Distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1002,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DonutSvg, {\n            viewBox: \"0 0 100 100\",\n            children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: \"50\",\n              cy: \"50\",\n              r: \"25\",\n              fill: \"none\",\n              stroke: \"rgba(255,255,255,0.1)\",\n              strokeWidth: \"10\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1004,\n              columnNumber: 29\n            }, this), donutData.map((item, index) => /*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: \"50\",\n              cy: \"50\",\n              r: \"25\",\n              fill: \"none\",\n              stroke: item.color,\n              strokeWidth: \"10\",\n              strokeDasharray: item.strokeDasharray,\n              strokeDashoffset: item.strokeDashoffset,\n              strokeLinecap: \"round\"\n            }, item.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1006,\n              columnNumber: 33\n            }, this)), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: \"50\",\n              y: \"50\",\n              textAnchor: \"middle\",\n              dy: \".3em\",\n              fill: \"white\",\n              fontSize: \"10\",\n              fontWeight: \"bold\",\n              transform: \"rotate(90 50 50)\",\n              children: formatCurrency(totalSpending)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1019,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1003,\n            columnNumber: 25\n          }, this), showLegend && /*#__PURE__*/_jsxDEV(Legend, {\n            children: sortedCategories.map(category => /*#__PURE__*/_jsxDEV(LegendItem, {\n              color: category.color,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1028,\n                columnNumber: 41\n              }, this), category.name, /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"amount\",\n                children: formatCurrency(category.amount)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1030,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"percent\",\n                children: [category.percentage, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1031,\n                columnNumber: 41\n              }, this)]\n            }, category.name, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1027,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1025,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1001,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CategoryBreakdown, {\n          children: [/*#__PURE__*/_jsxDEV(BreakdownTitle, {\n            children: \"Monthly Spending Breakdown\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1039,\n            columnNumber: 25\n          }, this), sortedCategories.map(category => /*#__PURE__*/_jsxDEV(CategoryBar, {\n            color: category.color,\n            percentage: category.percentage,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"label\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"name\",\n                children: category.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1043,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"value\",\n                children: formatCurrency(category.amount)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1044,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1042,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bar\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"fill\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1047,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1046,\n              columnNumber: 33\n            }, this)]\n          }, category.name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1041,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1038,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(StatusIndicator, {\n          children: [/*#__PURE__*/_jsxDEV(StatusLabel, {\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              width: \"20\",\n              height: \"20\",\n              viewBox: \"0 0 24 24\",\n              fill: \"none\",\n              xmlns: \"http://www.w3.org/2000/svg\",\n              children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M12 4V20\",\n                stroke: \"white\",\n                strokeWidth: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1056,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M19 12L12 20L5 12\",\n                stroke: \"white\",\n                strokeWidth: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1057,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1055,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Savings Rate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1059,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1054,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(StatusValue, {\n            status: monthlyCashFlow > 0 ? 'positive' : 'negative',\n            children: monthlyCashFlow > 0 ? cashFlowRatio + '%' : '0%'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1061,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1053,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1000,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 883,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 879,\n    columnNumber: 9\n  }, this);\n};\n_s(DamVisualization, \"0sQ/B1NXvfu2tKLzEpgtUOH9PIQ=\");\n_c27 = DamVisualization;\nexport default DamVisualization;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27;\n$RefreshReg$(_c, \"VisualizationContainer\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"Description\");\n$RefreshReg$(_c4, \"DashboardLayout\");\n$RefreshReg$(_c5, \"VisualizationSection\");\n$RefreshReg$(_c6, \"BreakdownSection\");\n$RefreshReg$(_c7, \"StatusIndicator\");\n$RefreshReg$(_c8, \"StatusLabel\");\n$RefreshReg$(_c9, \"StatusValue\");\n$RefreshReg$(_c10, \"ReservoirWrapper\");\n$RefreshReg$(_c11, \"ReservoirWater\");\n$RefreshReg$(_c12, \"WaterLevelLabel\");\n$RefreshReg$(_c13, \"DamBlock\");\n$RefreshReg$(_c14, \"DamGate\");\n$RefreshReg$(_c15, \"WaterOutflow\");\n$RefreshReg$(_c16, \"RainDrop\");\n$RefreshReg$(_c17, \"RainContainer\");\n$RefreshReg$(_c18, \"Legend\");\n$RefreshReg$(_c19, \"LegendItem\");\n$RefreshReg$(_c20, \"CategoryBreakdown\");\n$RefreshReg$(_c21, \"BreakdownTitle\");\n$RefreshReg$(_c22, \"CategoryBar\");\n$RefreshReg$(_c23, \"FinancialMetrics\");\n$RefreshReg$(_c24, \"MetricCard\");\n$RefreshReg$(_c25, \"DonutChart\");\n$RefreshReg$(_c26, \"DonutSvg\");\n$RefreshReg$(_c27, \"DamVisualization\");","map":{"version":3,"names":["React","useEffect","useState","styled","keyframes","css","jsxDEV","_jsxDEV","VisualizationContainer","div","_c","Title","h3","_c2","Description","p","_c3","DashboardLayout","_c4","VisualizationSection","_c5","BreakdownSection","_c6","StatusIndicator","_c7","StatusLabel","_c8","StatusValue","props","status","_c9","ReservoirWrapper","height","_c10","waterShimmer","ReservoirWater","level","_c11","WaterLevelLabel","_c12","DamBlock","_c13","DamGate","gateSize","position","isOpen","_c14","WaterOutflow","thickness","isZero","color","replace","_c15","rainFall","RainDrop","top","left","size","duration","delay","_c16","RainContainer","_c17","moneyFlow","MoneyLine","Math","random","min","width","label","MoneyLineContainer","Legend","_c18","LegendItem","_c19","progressAnimation","CategoryBreakdown","_c20","BreakdownTitle","h4","_c21","CategoryBar","percentage","_c22","FinancialMetrics","_c23","MetricCard","textColor","changeColor","_c24","DonutChart","_c25","DonutSvg","svg","_c26","DamVisualization","title","description","financialData","spendingCategories","showMetrics","showLegend","_s","waterLevel","setWaterLevel","incomeRate","setIncomeRate","expenseRate","setExpenseRate","rainDrops","setRainDrops","damGates","setDamGates","waterFlows","setWaterFlows","cashFlowStatus","setCashFlowStatus","totalAssets","totalLiabilities","netWorth","monthlyIncome","monthlyExpenses","monthlyCashFlow","cashFlowRatio","toFixed","defaultSpendingCategories","name","amount","categories","length","forEach","customCat","existingIndex","findIndex","cat","push","some","totalSpending","reduce","sum","categoriesWithPercentage","map","sortedCategories","sort","a","b","computeMoneyLineWidth","maxWidth","maxAmount","max","c","generateRainDrops","drops","count","i","id","generateDamGates","requiredCategories","categoriesToUse","hasEntertainment","reqCategory","defaultCategory","find","gates","usableHeight","startPosition","totalSpace","spacing","category","generateWaterFlows","flows","gate","basePosition","adjustedPosition","console","log","f","netWorthPercentage","ceil","interval","setInterval","clearInterval","formatCurrency","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","prepareDonutChartData","currentOffset","parseFloat","dashArray","PI","gap","startOffset","strokeDasharray","strokeDashoffset","donutData","children","fileName","_jsxFileName","lineNumber","columnNumber","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","drop","flow","className","cx","cy","r","item","index","x","y","textAnchor","dy","fontSize","fontWeight","transform","_c27","$RefreshReg$"],"sources":["/Users/franksu/Documents/Personal projects /hackathon 1 /Captial_One_Hack_Knight/finance-dam-visualizer-new/src/components/visualizations/DamVisualization.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled, { keyframes, css } from 'styled-components';\n\n//\n// -- Container & Basic Layout\n//\nconst VisualizationContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background: linear-gradient(135deg, #0f2027 0%, #203a43 50%, #2c5364 100%);\n  padding: 2.5rem;\n  border-radius: 20px;\n  margin-bottom: 2.5rem;\n  box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);\n  color: #fff;\n  width: 100%;\n`;\n\nconst Title = styled.h3`\n  margin-bottom: 1rem;\n  text-align: center;\n  font-size: 1.8rem;\n  font-weight: 700;\n  background: linear-gradient(90deg, #4facfe 0%, #00f2fe 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n`;\n\nconst Description = styled.p`\n  color: #eef2f7;\n  text-align: center;\n  max-width: 800px;\n  margin-bottom: 2.5rem;\n  line-height: 1.6;\n  font-size: 1.1rem;\n`;\n\n//\n// -- Enhanced Dashboard Layout\n//\nconst DashboardLayout = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  width: 100%;\n  gap: 2rem;\n  \n  @media (min-width: 992px) {\n    grid-template-columns: 2fr 1fr;\n  }\n`;\n\nconst VisualizationSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst BreakdownSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n`;\n\n//\n// -- Status Indicators\n//\nconst StatusIndicator = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n  background: rgba(255, 255, 255, 0.08);\n  border-radius: 12px;\n  margin-bottom: 1rem;\n  backdrop-filter: blur(8px);\n`;\n\nconst StatusLabel = styled.div`\n  display: flex;\n  align-items: center;\n  \n  span {\n    font-weight: 600;\n    margin-left: 0.5rem;\n  }\n`;\n\nconst StatusValue = styled.div`\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: ${props => {\n    if (props.status === 'positive') return '#4cd964';\n    if (props.status === 'negative') return '#ff3b30';\n    if (props.status === 'neutral') return '#ffcc00';\n    return '#fff';\n  }};\n`;\n\n//\n// -- Reservoir and Dam Visual (Enhanced)\n//\nconst ReservoirWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  max-width: 800px;\n  height: ${props => props.height}px;\n  margin-bottom: 2rem;\n  background: linear-gradient(180deg, #1a1a2e 0%, #1f3a63 100%);\n  border-radius: 20px;\n  overflow: hidden;\n  box-shadow: \n    inset 0 0 20px rgba(0, 0, 0, 0.5),\n    0 8px 16px rgba(0, 0, 0, 0.2);\n`;\n\nconst waterShimmer = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`;\n\n/**\n * Enhanced water with shimmer and waves\n */\nconst ReservoirWater = styled.div`\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  height: ${props => props.level}%;\n  background: linear-gradient(\n    180deg,\n    rgba(0, 150, 255, 0.8) 0%,\n    rgba(72, 198, 239, 0.7) 100%\n  );\n  background-size: 200% 200%;\n  animation: ${waterShimmer} 5s ease infinite;\n  box-shadow: \n    inset 0 2px 15px rgba(255, 255, 255, 0.3),\n    0 0 10px rgba(0, 150, 255, 0.5);\n  transition: height 1s ease-in-out;\n  clip-path: polygon(\n    0% 100%,\n    0% 10%,\n    25% 5%,\n    50% 0%,  /* highest point in the center */\n    75% 5%,\n    100% 10%,\n    100% 100%\n  );\n  \n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 15px;\n    background: rgba(255, 255, 255, 0.3);\n    border-radius: 50%;\n    filter: blur(3px);\n  }\n`;\n\nconst WaterLevelLabel = styled.div`\n  position: absolute;\n  right: 80px;\n  color: white;\n  font-weight: bold;\n  text-shadow: 0 0 8px rgba(0, 0, 0, 0.7);\n  padding: 4px 10px;\n  border-radius: 12px;\n  background: rgba(0, 0, 0, 0.3);\n  font-size: 0.9rem;\n  bottom: ${props => props.level}%;\n  transform: translateY(50%);\n  transition: bottom 1s ease-in-out;\n`;\n\n/**\n * Enhanced dam block with texture and gates\n */\nconst DamBlock = styled.div`\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  width: 70px;\n  height: 100%;\n  background: linear-gradient(90deg, #444 0%, #666 50%, #555 100%);\n  box-shadow: \n    inset 0 0 20px rgba(0,0,0,0.8), \n    -5px 0 15px rgba(0,0,0,0.5);\n  border-top-left-radius: 15px;\n  border-bottom-left-radius: 5px;\n  \n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-image: repeating-linear-gradient(\n      0deg,\n      rgba(255, 255, 255, 0.1),\n      rgba(255, 255, 255, 0.1) 2px,\n      transparent 2px,\n      transparent 8px\n    );\n  }\n`;\n\nconst DamGate = styled.div`\n  position: absolute;\n  right: 0;\n  width: 70px;\n  height: ${props => props.gateSize || 20}px;\n  background: #333;\n  box-shadow: inset 0 0 10px rgba(0,0,0,0.8);\n  border-top-left-radius: 5px;\n  border-bottom-left-radius: 5px;\n  border-left: 2px solid rgba(255, 255, 255, 0.2);\n  bottom: ${props => props.position}%;\n  overflow: visible;\n  \n  &::before {\n    content: '';\n    position: absolute;\n    left: 10px;\n    top: 50%;\n    width: 8px;\n    height: 8px;\n    background: ${props => props.isOpen ? '#4cd964' : '#ff3b30'};\n    border-radius: 50%;\n    transform: translateY(-50%);\n    box-shadow: 0 0 10px ${props => props.isOpen ? 'rgba(76, 217, 100, 0.7)' : 'rgba(255, 59, 48, 0.7)'};\n  }\n  \n  /* Opening in the dam */\n  &::after {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(\n      to right,\n      rgba(0, 0, 0, 0.9),\n      rgba(0, 0, 0, 0.5)\n    );\n    border-top-left-radius: 5px;\n    border-bottom-left-radius: 5px;\n  }\n`;\n\n//\n// -- Animated Water Flows\n//\n// No arrow animations needed\n\nconst WaterOutflow = styled.div`\n  position: absolute;\n  bottom: ${props => props.position}%;\n  right: 0; /* Align exactly with the dam wall */\n  height: ${props => props.thickness || 8}px;\n  width: ${props => props.isZero ? '15px' : '80px'}; /* Shorter bar for zero expenses */\n  background: ${props => {\n    if (props.isZero) {\n      // For zero expenses, use dotted pattern\n      return props.color ? \n        `repeating-linear-gradient(90deg, ${props.color.replace('0.8', '0.4')}, ${props.color.replace('0.8', '0.4')} 2px, transparent 2px, transparent 4px)` : \n        'repeating-linear-gradient(90deg, rgba(100, 100, 100, 0.4), rgba(100, 100, 100, 0.4) 2px, transparent 2px, transparent 4px)';\n    } else {\n      // Normal gradient for expenses > 0\n      return props.color ? \n        `linear-gradient(to right, ${props.color.replace('0.8', '0.9')}, ${props.color.replace('0.8', '0.5')})` : \n        'linear-gradient(to right, rgba(60, 180, 255, 0.9), rgba(72, 198, 239, 0.7))';\n    }\n  }};\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n  box-shadow: ${props => props.isZero ? 'none' : `5px 0 8px ${props.color ? props.color.replace('0.8', '0.5') : 'rgba(0, 162, 255, 0.5)'}`};\n  opacity: ${props => props.isZero ? 0.7 : 0.9};\n  z-index: 5;\n  transform: translateX(0); /* Ensure no leaking into dam */\n  \n  &::after {\n    content: attr(data-tooltip);\n    position: absolute;\n    top: -22px;\n    left: 10px;\n    background: rgba(0, 0, 0, 0.7);\n    color: white;\n    padding: 3px 8px;\n    border-radius: 4px;\n    font-size: 0.75rem;\n    white-space: nowrap;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n    z-index: 10;\n  }\n  \n  &:hover::after {\n    opacity: 1;\n  }\n`;\n\n//\n// -- Enhanced Rain for Income\n//\nconst rainFall = keyframes`\n  0% { transform: translateY(0); opacity: 0.9; }\n  50% { opacity: 1; }\n  100% { transform: translateY(100%); opacity: 0; }\n`;\n\nconst RainDrop = styled.div`\n  position: absolute;\n  top: ${props => props.top}%;\n  left: ${props => props.left}%;\n  width: ${props => props.size || 2}px;\n  height: ${props => (props.size || 2) * 4}px;\n  background: rgba(160, 230, 255, 0.9);\n  border-radius: 3px;\n  animation: ${rainFall} ${props => props.duration}s linear infinite;\n  animation-delay: ${props => props.delay}s;\n  box-shadow: 0 0 5px rgba(160, 230, 255, 0.5);\n`;\n\nconst RainContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n`;\n\n//\n// -- Enhanced Money Lines for Outflows (spending)\n//\nconst moneyFlow = keyframes`\n  0% { \n    width: 0; \n    opacity: 0.8;\n    transform: translateX(0);\n  }\n  50% { \n    width: 100px; \n    opacity: 1;\n    transform: translateX(40px);\n  }\n  100% { \n    width: 30px; \n    opacity: 0;\n    transform: translateX(120px);\n  }\n`;\n\nconst MoneyLine = styled.div`\n  height: 5px;\n  background: ${props => props.color || 'rgba(255,255,255,0.8)'};\n  transform-origin: left;\n  animation: ${moneyFlow} ${props => 2 + Math.random()}s linear infinite;\n  width: ${props => Math.min(120, props.width || 50)}px;\n  border-radius: 3px;\n  box-shadow: 0 0 8px ${props => props.color ? props.color.replace('0.8', '0.5') : 'rgba(255,255,255,0.5)'};\n  position: relative;\n  \n  &::after {\n    content: '${props => props.label}';\n    position: absolute;\n    top: -20px;\n    left: 0;\n    background: rgba(0, 0, 0, 0.7);\n    color: white;\n    padding: 2px 6px;\n    border-radius: 4px;\n    font-size: 0.7rem;\n    white-space: nowrap;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n  \n  &:hover::after {\n    opacity: 1;\n  }\n`;\n\nconst MoneyLineContainer = styled.div`\n  position: absolute;\n  right: 70px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 5px;\n  height: 100%;\n`;\n\n//\n// -- Enhanced Legend and Charts\n//\nconst Legend = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n  gap: 1rem;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 12px;\n  padding: 1rem;\n  width: 100%;\n  margin-top: 1.5rem;\n  backdrop-filter: blur(8px);\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 0.5rem;\n  border-radius: 8px;\n  background: rgba(255, 255, 255, 0.05);\n  transition: all 0.3s ease;\n  \n  &:hover {\n    background: rgba(255, 255, 255, 0.1);\n    transform: translateY(-2px);\n  }\n  \n  span {\n    width: 14px;\n    height: 14px;\n    background: ${props => props.color};\n    margin-right: 10px;\n    display: inline-block;\n    border-radius: 4px;\n    box-shadow: 0 0 8px ${props => props.color.replace('0.8', '0.5')};\n  }\n  \n  .amount {\n    margin-left: auto;\n    font-weight: 700;\n    color: #fff;\n  }\n  \n  .percent {\n    font-size: 0.8rem;\n    color: rgba(255, 255, 255, 0.7);\n    margin-left: 8px;\n  }\n`;\n\nconst progressAnimation = keyframes`\n  from { width: 0; }\n  to { width: var(--target-width); }\n`;\n\nconst CategoryBreakdown = styled.div`\n  background: rgba(255, 255, 255, 0.08);\n  border-radius: 12px;\n  padding: 1.5rem;\n  width: 100%;\n`;\n\nconst BreakdownTitle = styled.h4`\n  font-size: 1.2rem;\n  margin-bottom: 1rem;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n  padding-bottom: 0.5rem;\n`;\n\nconst CategoryBar = styled.div`\n  margin-bottom: 0.8rem;\n  \n  .label {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 0.3rem;\n    \n    .name {\n      font-weight: 500;\n    }\n    \n    .value {\n      font-weight: 600;\n    }\n  }\n  \n  .bar {\n    height: 12px;\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 6px;\n    overflow: hidden;\n    position: relative;\n    \n    .fill {\n      position: absolute;\n      height: 100%;\n      background: ${props => props.color};\n      border-radius: 6px;\n      width: 0;\n      --target-width: ${props => props.percentage}%;\n      animation: ${progressAnimation} 1.5s ease forwards;\n      box-shadow: 0 0 10px ${props => props.color.replace('0.8', '0.4')};\n    }\n  }\n`;\n\n//\n// -- Financial Metrics (Enhanced)\n//\nconst FinancialMetrics = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n  gap: 1rem;\n  width: 100%;\n  margin-top: 1.5rem;\n`;\n\nconst MetricCard = styled.div`\n  background: rgba(255, 255, 255, 0.08);\n  padding: 1.2rem;\n  border-radius: 16px;\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);\n  text-align: center;\n  backdrop-filter: blur(8px);\n  transition: all 0.3s ease;\n  border-top: 3px solid ${props => props.color || 'rgba(0, 162, 255, 0.8)'};\n  \n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 12px 20px rgba(0, 0, 0, 0.2);\n  }\n  \n  h4 {\n    margin-top: 0;\n    font-size: 0.9rem;\n    font-weight: 500;\n    color: rgba(255, 255, 255, 0.8);\n    margin-bottom: 0.5rem;\n  }\n  \n  p {\n    font-size: 1.4rem;\n    font-weight: 700;\n    margin-bottom: 0.5rem;\n    color: ${props => props.textColor || '#fff'};\n  }\n  \n  .change {\n    font-size: 0.8rem;\n    color: ${props => props.changeColor || '#4cd964'};\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    \n    svg {\n      margin-right: 0.3rem;\n    }\n  }\n`;\n\nconst DonutChart = styled.div`\n  width: 100%;\n  padding: 1.5rem;\n  background: rgba(255, 255, 255, 0.08);\n  border-radius: 16px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst DonutSvg = styled.svg`\n  width: 160px;\n  height: 160px;\n  transform: rotate(-90deg);\n`;\n\n//\n// -- Main Component (Enhanced)\n//\nconst DamVisualization = ({\n    title = \"Financial Dam\",\n    description = \"A stylized 2D reservoir with a dam, animated water outflow, rain representing income, and money lines representing outflows.\",\n    financialData = {},\n    spendingCategories = [],\n    showMetrics = true,\n    showLegend = true,\n    height = 350\n}) => {\n    const [waterLevel, setWaterLevel] = useState(50);\n    const [incomeRate, setIncomeRate] = useState(5);\n    const [expenseRate, setExpenseRate] = useState(3);\n    const [rainDrops, setRainDrops] = useState([]);\n    const [damGates, setDamGates] = useState([]);\n    const [waterFlows, setWaterFlows] = useState([]);\n    const [cashFlowStatus, setCashFlowStatus] = useState('neutral');\n\n    // Extract financial metrics\n    const {\n        totalAssets = 100000,\n        totalLiabilities = 40000,\n        netWorth = totalAssets - totalLiabilities,\n        monthlyIncome = 5000,\n        monthlyExpenses = 3000\n    } = financialData;\n\n    // Calculate monthly cash flow\n    const monthlyCashFlow = monthlyIncome - monthlyExpenses;\n    const cashFlowRatio = (monthlyCashFlow / monthlyIncome * 100).toFixed(1);\n\n    // Default spending categories (outflows)\n    const defaultSpendingCategories = [\n        { name: 'Housing', color: 'rgba(255, 128, 66, 0.8)', amount: 1200 },\n        { name: 'Food', color: 'rgba(255, 187, 40, 0.8)', amount: 800 },\n        { name: 'Transportation', color: 'rgba(136, 132, 216, 0.8)', amount: 400 },\n        { name: 'Entertainment', color: 'rgba(0, 136, 254, 0.8)', amount: 300 },\n        { name: 'Utilities', color: 'rgba(0, 196, 159, 0.8)', amount: 500 }\n    ];\n    \n    // Always use default categories as a base, then override/add with any provided categories\n    // This ensures all standard categories are always present\n    let categories = [...defaultSpendingCategories];\n    \n    // If custom categories were provided, merge them with defaults\n    if (spendingCategories.length > 0) {\n        // For each provided category, replace the default or add it\n        spendingCategories.forEach(customCat => {\n            const existingIndex = categories.findIndex(cat => cat.name === customCat.name);\n            if (existingIndex >= 0) {\n                // Replace existing category\n                categories[existingIndex] = customCat;\n            } else {\n                // Add new category\n                categories.push(customCat);\n            }\n        });\n    }\n    \n    // Make sure Entertainment is always included\n    if (!categories.some(cat => cat.name === 'Entertainment')) {\n        categories.push({\n            name: 'Entertainment',\n            color: 'rgba(0, 136, 254, 0.8)',\n            amount: 300 // Default amount\n        });\n    }\n        \n    // Calculate percentages for each spending category\n    const totalSpending = categories.reduce((sum, cat) => sum + cat.amount, 0);\n    const categoriesWithPercentage = categories.map(cat => ({\n        ...cat,\n        percentage: ((cat.amount / totalSpending) * 100).toFixed(1)\n    }));\n    \n    // Sort categories by amount (descending)\n    const sortedCategories = [...categoriesWithPercentage].sort((a, b) => b.amount - a.amount);\n\n    // Helper: compute money line width using a log scale with better distribution\n    const computeMoneyLineWidth = amount => {\n        const maxWidth = 120; // Maximum width of the flow\n        const maxAmount = Math.max(...categories.map(c => c.amount));\n        return Math.max(30, (amount / maxAmount) * maxWidth);\n    };\n\n    // Generate rain drops based on income (more income = more rain)\n    const generateRainDrops = () => {\n        const drops = [];\n        // Increase rain density based on income rate\n        const count = Math.min(30, incomeRate * 4);\n        for (let i = 0; i < count; i++) {\n            drops.push({\n                id: `rain-${i}`,\n                top: Math.random() * 20, // top 20% of the reservoir area\n                left: Math.random() * 100, // anywhere horizontally\n                duration: 0.8 + Math.random(), // fall duration between 0.8-1.8s\n                delay: Math.random() * 2,\n                size: Math.random() > 0.7 ? 3 : 2 // Some drops are larger\n            });\n        }\n        return drops;\n    };\n\n    // Generate dam gates based on all spending categories with equal spacing along entire dam height\n    const generateDamGates = () => {\n        // Define key required categories\n        const requiredCategories = [\n            'Housing', \n            'Food', \n            'Transportation', \n            'Entertainment', \n            'Utilities'\n        ];\n        \n        // Start with all categories\n        let categoriesToUse = [...sortedCategories];\n        \n        // If Entertainment is not in the sorted categories, make sure to explicitly add it\n        const hasEntertainment = categoriesToUse.some(cat => cat.name === 'Entertainment');\n        if (!hasEntertainment) {\n            // Add entertainment with 0 amount by default\n            categoriesToUse.push({\n                name: 'Entertainment',\n                color: 'rgba(0, 136, 254, 0.8)',\n                amount: 0, // Set to 0 to fix the bug\n                percentage: '0.0'\n            });\n        }\n        \n        // Ensure all required categories are included\n        for (const reqCategory of requiredCategories) {\n            if (!categoriesToUse.some(cat => cat.name === reqCategory)) {\n                // Find default values for this category\n                const defaultCategory = defaultSpendingCategories.find(c => c.name === reqCategory);\n                if (defaultCategory) {\n                    categoriesToUse.push({\n                        ...defaultCategory,\n                        percentage: ((defaultCategory.amount / totalSpending) * 100).toFixed(1)\n                    });\n                }\n            }\n        }\n        \n        // Use all available categories\n        const gates = [];\n        \n        // Calculate the usable height of the dam (using full height, no margins)\n        const usableHeight = 100; // Use 100% of the dam height\n        const startPosition = 0; // Start at 0% from the bottom\n        \n        // Calculate equal spacing for the gates\n        const totalSpace = usableHeight;\n        const spacing = totalSpace / categoriesToUse.length;\n        \n        // Create a gate for each spending category with equal distribution\n        for (let i = 0; i < categoriesToUse.length; i++) {\n            const category = categoriesToUse[i];\n            \n            // Size gate based on a fixed percentage of spacing\n            const gateSize = Math.max(10, Math.min(spacing * 0.7, 20));\n            \n            // Calculate position with equal spacing\n            const position = startPosition + (i * spacing) + (spacing / 2) - (gateSize / 2);\n            \n            gates.push({\n                id: `gate-${i+1}`,\n                position: position,\n                isOpen: category.amount > 0, // Only open if amount > 0\n                gateSize: gateSize,\n                category: category.name,\n                amount: category.amount,\n                color: category.color\n            });\n        }\n        \n        return gates;\n    };\n\n    // Generate water outflows for ALL gates, showing different appearances based on amount\n    const generateWaterFlows = (gates) => {\n        const flows = [];\n        \n        gates.forEach(gate => {\n            const basePosition = gate.position;\n            \n            // Make sure the bar is exactly the same height as the gate opening\n            const thickness = gate.gateSize * 0.96; // Slightly smaller than gate height to fit perfectly\n            \n            // Center the bar vertically in the gate\n            const adjustedPosition = basePosition + (gate.gateSize - thickness) / 2;\n\n            // For zero amount expenses, display a gate without flow\n            if (gate.amount <= 0) {\n                // Create a special \"zero flow\" indicator\n                flows.push({\n                    id: `flow-${gate.id}`,\n                    position: adjustedPosition,\n                    thickness: thickness,\n                    color: gate.color,\n                    label: gate.category,\n                    amount: 0,\n                    isZero: true\n                });\n            } else {\n                // Create normal flow for non-zero expenses\n                flows.push({\n                    id: `flow-${gate.id}`,\n                    position: adjustedPosition,\n                    thickness: thickness,\n                    color: gate.color,\n                    label: gate.category,\n                    amount: gate.amount,\n                    isZero: false\n                });\n            }\n        });\n        \n        console.log(\"Generated flows:\", flows.map(f => `${f.label}: ${f.amount}${f.isZero ? ' (zero)' : ''}`));\n        \n        return flows;\n    };\n\n    // Set initial values and update water level to represent net worth (assets - liabilities)\n    useEffect(() => {\n        // Calculate water level based on net worth as percentage of total assets\n        // If net worth is negative, water level will be very low\n        if (totalAssets > 0) {\n            // Net worth as percentage of total assets (clamp between 10-90%)\n            const netWorthPercentage = (netWorth / totalAssets) * 100;\n            setWaterLevel(Math.max(10, Math.min(90, netWorthPercentage)));\n        } else {\n            setWaterLevel(10); // Minimum level if no assets\n        }\n        \n        setIncomeRate(Math.min(10, Math.ceil(monthlyIncome / 1000)));\n        setExpenseRate(Math.min(10, Math.ceil(monthlyExpenses / 1000)));\n        setRainDrops(generateRainDrops());\n        \n        const gates = generateDamGates();\n        setDamGates(gates);\n        setWaterFlows(generateWaterFlows(gates));\n        \n        // Set cash flow status for color indicators\n        if (monthlyCashFlow > 0) {\n            setCashFlowStatus('positive');\n        } else if (monthlyCashFlow < 0) {\n            setCashFlowStatus('negative');\n        } else {\n            setCashFlowStatus('neutral');\n        }\n\n        // No need for animated level changes since we're showing actual net worth\n        // Just update raindrops periodically\n        const interval = setInterval(() => {\n            setRainDrops(generateRainDrops());\n        }, 2000);\n\n        return () => clearInterval(interval);\n    }, [totalAssets, netWorth, monthlyIncome, monthlyExpenses, monthlyCashFlow]);\n\n    // Format currency for display\n    const formatCurrency = (amount) => {\n        return new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: 'USD',\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0\n        }).format(amount);\n    };\n\n    // Setup donut chart data and calculations\n    const prepareDonutChartData = () => {\n        let currentOffset = 0;\n        return sortedCategories.map(category => {\n            const percentage = parseFloat(category.percentage);\n            const dashArray = 2 * Math.PI * 25 * percentage / 100;\n            const gap = 2 * Math.PI * 25 * (100 - percentage) / 100;\n            const startOffset = -currentOffset;\n            currentOffset += dashArray;\n            \n            return {\n                ...category,\n                dashArray,\n                gap,\n                strokeDasharray: `${dashArray} ${gap}`,\n                strokeDashoffset: startOffset\n            };\n        });\n    };\n\n    const donutData = prepareDonutChartData();\n\n    return (\n        <VisualizationContainer>\n            <Title>{title}</Title>\n            <Description>{description}</Description>\n\n            <DashboardLayout>\n                <VisualizationSection>\n                    <StatusIndicator>\n                        <StatusLabel>\n                            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path d=\"M13 5.07C16.93 5.56 20 8.92 20 13C20 17.42 16.42 21 12 21C7.58 21 4 17.42 4 13C4 8.92 7.07 5.56 11 5.07V3H13V5.07Z\" stroke=\"white\" strokeWidth=\"2\" />\n                                <path d=\"M12 8V13H17\" stroke=\"white\" strokeWidth=\"2\" strokeLinecap=\"round\" />\n                            </svg>\n                            <span>Cash Flow Status</span>\n                        </StatusLabel>\n                        <StatusValue status={cashFlowStatus}>\n                            {cashFlowStatus === 'positive' ? `+${formatCurrency(monthlyCashFlow)} (+${cashFlowRatio}%)` : \n                            cashFlowStatus === 'negative' ? `${formatCurrency(monthlyCashFlow)} (${cashFlowRatio}%)` : \n                            `${formatCurrency(monthlyCashFlow)} (0%)`}\n                        </StatusValue>\n                    </StatusIndicator>\n\n                    <ReservoirWrapper height={height}>\n                        {/* Rain overlay for income */}\n                        <RainContainer>\n                            {rainDrops.map(drop => (\n                                <RainDrop\n                                    key={drop.id}\n                                    top={drop.top}\n                                    left={drop.left}\n                                    duration={drop.duration}\n                                    delay={drop.delay}\n                                    size={drop.size}\n                                />\n                            ))}\n                        </RainContainer>\n\n                        {/* Water inside the reservoir */}\n                        <ReservoirWater level={waterLevel} />\n                        <WaterLevelLabel level={waterLevel}>\n                            Net Worth: {waterLevel.toFixed(0)}%\n                        </WaterLevelLabel>\n\n                        {/* The dam block with gates */}\n                        <DamBlock />\n                        \n                        {/* Dam gates */}\n                        {damGates.map(gate => (\n                            <DamGate\n                                key={gate.id}\n                                position={gate.position}\n                                isOpen={gate.isOpen}\n                                gateSize={gate.gateSize}\n                            />\n                        ))}\n\n                        {/* Water outflow bars for all expenses (showing pattern for zero amounts) */}\n                        {waterFlows.map(flow => (\n                            <WaterOutflow\n                                key={flow.id}\n                                position={flow.position}\n                                thickness={flow.thickness}\n                                color={flow.color}\n                                isZero={flow.isZero}\n                                data-tooltip={`${flow.label}: ${formatCurrency(flow.amount)}`}\n                            />\n                        ))}\n\n                        {/* We've removed the duplicated money lines since water is now flowing through the dam gates */}\n                    </ReservoirWrapper>\n\n                    {showMetrics && (\n                        <FinancialMetrics>\n                            <MetricCard color=\"rgba(0, 196, 159, 0.8)\" textColor={netWorth >= 0 ? '#4cd964' : '#ff3b30'}>\n                                <h4>Net Worth</h4>\n                                <p>{formatCurrency(netWorth)}</p>\n                                <div className=\"change\">\n                                    {netWorth >= 0 ? \n                                        <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                            <path d=\"M7 17L12 12L17 17\" stroke=\"#4cd964\" strokeWidth=\"2\" />\n                                            <path d=\"M12 12V20\" stroke=\"#4cd964\" strokeWidth=\"2\" />\n                                        </svg> : \n                                        <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                            <path d=\"M7 7L12 12L17 7\" stroke=\"#ff3b30\" strokeWidth=\"2\" />\n                                            <path d=\"M12 12V4\" stroke=\"#ff3b30\" strokeWidth=\"2\" />\n                                        </svg>\n                                    }\n                                    {((netWorth / totalAssets) * 100).toFixed(1)}% of Assets\n                                </div>\n                            </MetricCard>\n                            <MetricCard color=\"rgba(0, 136, 254, 0.8)\">\n                                <h4>Total Assets</h4>\n                                <p>{formatCurrency(totalAssets)}</p>\n                                <div className=\"change\" style={{color: 'rgba(255, 255, 255, 0.6)'}}>\n                                    Net Positive\n                                </div>\n                            </MetricCard>\n                            <MetricCard color=\"rgba(255, 128, 66, 0.8)\" textColor=\"#ff3b30\">\n                                <h4>Total Liabilities</h4>\n                                <p>{formatCurrency(totalLiabilities)}</p>\n                                <div className=\"change\" style={{color: 'rgba(255, 255, 255, 0.6)'}}>\n                                    {((totalLiabilities / totalAssets) * 100).toFixed(1)}% of Assets\n                                </div>\n                            </MetricCard>\n                            <MetricCard color=\"rgba(72, 198, 239, 0.8)\" textColor=\"#4cd964\">\n                                <h4>Monthly Income</h4>\n                                <p>{formatCurrency(monthlyIncome)}</p>\n                                <div className=\"change\" style={{color: 'rgba(255, 255, 255, 0.6)'}}>\n                                    Regular Inflow\n                                </div>\n                            </MetricCard>\n                            <MetricCard color=\"rgba(255, 187, 40, 0.8)\" textColor=\"#ffcc00\">\n                                <h4>Monthly Expenses</h4>\n                                <p>{formatCurrency(monthlyExpenses)}</p>\n                                <div className=\"change\" style={{color: cashFlowStatus === 'positive' ? '#4cd964' : '#ff3b30'}}>\n                                    {((monthlyExpenses / monthlyIncome) * 100).toFixed(1)}% of Income\n                                </div>\n                            </MetricCard>\n                        </FinancialMetrics>\n                    )}\n                </VisualizationSection>\n\n                <BreakdownSection>\n                    <DonutChart>\n                        <BreakdownTitle>Expense Distribution</BreakdownTitle>\n                        <DonutSvg viewBox=\"0 0 100 100\">\n                            <circle cx=\"50\" cy=\"50\" r=\"25\" fill=\"none\" stroke=\"rgba(255,255,255,0.1)\" strokeWidth=\"10\" />\n                            {donutData.map((item, index) => (\n                                <circle \n                                    key={item.name} \n                                    cx=\"50\" \n                                    cy=\"50\" \n                                    r=\"25\" \n                                    fill=\"none\" \n                                    stroke={item.color} \n                                    strokeWidth=\"10\"\n                                    strokeDasharray={item.strokeDasharray}\n                                    strokeDashoffset={item.strokeDashoffset}\n                                    strokeLinecap=\"round\"\n                                />\n                            ))}\n                            <text x=\"50\" y=\"50\" textAnchor=\"middle\" dy=\".3em\" fill=\"white\" fontSize=\"10\" fontWeight=\"bold\" transform=\"rotate(90 50 50)\">\n                                {formatCurrency(totalSpending)}\n                            </text>\n                        </DonutSvg>\n                        \n                        {showLegend && (\n                            <Legend>\n                                {sortedCategories.map(category => (\n                                    <LegendItem key={category.name} color={category.color}>\n                                        <span />\n                                        {category.name}\n                                        <div className=\"amount\">{formatCurrency(category.amount)}</div>\n                                        <div className=\"percent\">{category.percentage}%</div>\n                                    </LegendItem>\n                                ))}\n                            </Legend>\n                        )}\n                    </DonutChart>\n\n                    <CategoryBreakdown>\n                        <BreakdownTitle>Monthly Spending Breakdown</BreakdownTitle>\n                        {sortedCategories.map(category => (\n                            <CategoryBar key={category.name} color={category.color} percentage={category.percentage}>\n                                <div className=\"label\">\n                                    <div className=\"name\">{category.name}</div>\n                                    <div className=\"value\">{formatCurrency(category.amount)}</div>\n                                </div>\n                                <div className=\"bar\">\n                                    <div className=\"fill\"></div>\n                                </div>\n                            </CategoryBar>\n                        ))}\n                    </CategoryBreakdown>\n\n                    <StatusIndicator>\n                        <StatusLabel>\n                            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path d=\"M12 4V20\" stroke=\"white\" strokeWidth=\"2\"/>\n                                <path d=\"M19 12L12 20L5 12\" stroke=\"white\" strokeWidth=\"2\"/>\n                            </svg>\n                            <span>Savings Rate</span>\n                        </StatusLabel>\n                        <StatusValue status={monthlyCashFlow > 0 ? 'positive' : 'negative'}>\n                            {monthlyCashFlow > 0 ? cashFlowRatio + '%' : '0%'}\n                        </StatusValue>\n                    </StatusIndicator>\n                </BreakdownSection>\n            </DashboardLayout>\n        </VisualizationContainer>\n    );\n};\n\nexport default DamVisualization;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,IAAIC,SAAS,EAAEC,GAAG,QAAQ,mBAAmB;;AAE1D;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,sBAAsB,GAAGL,MAAM,CAACM,GAAG;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GAXIF,sBAAsB;AAa5B,MAAMG,KAAK,GAAGR,MAAM,CAACS,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GARIF,KAAK;AAUX,MAAMG,WAAW,GAAGX,MAAM,CAACY,CAAC;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AAAAC,GAAA,GAXMF,WAAW;AAYjB,MAAMG,eAAe,GAAGd,MAAM,CAACM,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACS,GAAA,GATID,eAAe;AAWrB,MAAME,oBAAoB,GAAGhB,MAAM,CAACM,GAAG;AACvC;AACA;AACA;AACA,CAAC;AAACW,GAAA,GAJID,oBAAoB;AAM1B,MAAME,gBAAgB,GAAGlB,MAAM,CAACM,GAAG;AACnC;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AAAAa,GAAA,GARMD,gBAAgB;AAStB,MAAME,eAAe,GAAGpB,MAAM,CAACM,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACe,GAAA,GATID,eAAe;AAWrB,MAAME,WAAW,GAAGtB,MAAM,CAACM,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACiB,GAAA,GARID,WAAW;AAUjB,MAAME,WAAW,GAAGxB,MAAM,CAACM,GAAG;AAC9B;AACA;AACA,WAAWmB,KAAK,IAAI;EAChB,IAAIA,KAAK,CAACC,MAAM,KAAK,UAAU,EAAE,OAAO,SAAS;EACjD,IAAID,KAAK,CAACC,MAAM,KAAK,UAAU,EAAE,OAAO,SAAS;EACjD,IAAID,KAAK,CAACC,MAAM,KAAK,SAAS,EAAE,OAAO,SAAS;EAChD,OAAO,MAAM;AACf,CAAC;AACH,CAAC;;AAED;AACA;AACA;AAAAC,GAAA,GAbMH,WAAW;AAcjB,MAAMI,gBAAgB,GAAG5B,MAAM,CAACM,GAAG;AACnC;AACA;AACA;AACA,YAAYmB,KAAK,IAAIA,KAAK,CAACI,MAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,IAAA,GAZIF,gBAAgB;AActB,MAAMG,YAAY,GAAG9B,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,MAAM+B,cAAc,GAAGhC,MAAM,CAACM,GAAG;AACjC;AACA;AACA;AACA,YAAYmB,KAAK,IAAIA,KAAK,CAACQ,KAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,eAAeF,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACG,IAAA,GArCIF,cAAc;AAuCpB,MAAMG,eAAe,GAAGnC,MAAM,CAACM,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAYmB,KAAK,IAAIA,KAAK,CAACQ,KAAK;AAChC;AACA;AACA,CAAC;;AAED;AACA;AACA;AAFAG,IAAA,GAfMD,eAAe;AAkBrB,MAAME,QAAQ,GAAGrC,MAAM,CAACM,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACgC,IAAA,GA5BID,QAAQ;AA8Bd,MAAME,OAAO,GAAGvC,MAAM,CAACM,GAAG;AAC1B;AACA;AACA;AACA,YAAYmB,KAAK,IAAIA,KAAK,CAACe,QAAQ,IAAI,E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wBAAwBxC,KAAK,IAAIA,KAAK,CAACsB,KAAK,GAAGtB,KAAK,CAACsB,KAAK,CAACC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,uBAAuB;AAC1G;AACA;AACA;AACA,gBAAgBvB,KAAK,IAAIA,KAAK,CAACyC,KAAK;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,kBAAkB,GAAGnE,MAAM,CAACM,GAAG;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,MAAM8D,MAAM,GAAGpE,MAAM,CAACM,GAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAC+D,IAAA,GAVID,MAAM;AAYZ,MAAME,UAAU,GAAGtE,MAAM,CAACM,GAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkBmB,KAAK,IAAIA,KAAK,CAACsB,KAAK;AACtC;AACA;AACA;AACA,0BAA0BtB,KAAK,IAAIA,KAAK,CAACsB,KAAK,CAACC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACuB,IAAA,GAlCID,UAAU;AAoChB,MAAME,iBAAiB,GAAGvE,SAAS;AACnC;AACA;AACA,CAAC;AAED,MAAMwE,iBAAiB,GAAGzE,MAAM,CAACM,GAAG;AACpC;AACA;AACA;AACA;AACA,CAAC;AAACoE,IAAA,GALID,iBAAiB;AAOvB,MAAME,cAAc,GAAG3E,MAAM,CAAC4E,EAAE;AAChC;AACA;AACA;AACA;AACA,CAAC;AAACC,IAAA,GALIF,cAAc;AAOpB,MAAMG,WAAW,GAAG9E,MAAM,CAACM,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}