{"ast":null,"code":"var _jsxFileName = \"/Users/luckyhappyfish/repos/Captial_One_Hack_Knight/finance-dam-visualizer-new/src/context/DataContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { db, generateScenarios, calculateFinancialInsights } from '../services/firebase';\nimport { collection, doc, setDoc, getDoc, getDocs } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext();\nexport function useData() {\n  _s();\n  return useContext(DataContext);\n}\n_s(useData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function DataProvider({\n  children\n}) {\n  _s2();\n  const [userFinancialData, setUserFinancialData] = useState(null);\n  const [futureScenarios, setFutureScenarios] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [dreamLifeText, setDreamLifeText] = useState('');\n\n  // Load data from localStorage on initial load\n  useEffect(() => {\n    try {\n      const storedData = localStorage.getItem('userFinancialData');\n      const storedDreamText = localStorage.getItem('dreamLifeText');\n      const storedScenarios = localStorage.getItem('futureScenarios');\n      if (storedData) {\n        setUserFinancialData(JSON.parse(storedData));\n      }\n      if (storedDreamText) {\n        setDreamLifeText(storedDreamText);\n      }\n      if (storedScenarios) {\n        setFutureScenarios(JSON.parse(storedScenarios));\n      }\n    } catch (err) {\n      console.error('Error loading data from localStorage:', err);\n    }\n  }, []);\n\n  // Save questionnaire data\n  async function saveQuestionnaireData(data) {\n    setLoading(true);\n    try {\n      // Store in local state\n      setUserFinancialData(data);\n\n      // Save to localStorage\n      localStorage.setItem('userFinancialData', JSON.stringify(data));\n\n      // Save to Firestore if online (anonymous document with a session ID)\n      const sessionId = localStorage.getItem('sessionId') || `session-${Date.now()}`;\n      localStorage.setItem('sessionId', sessionId);\n      await setDoc(doc(db, 'anonymousData', sessionId), {\n        financialData: data,\n        timestamp: new Date()\n      }, {\n        merge: true\n      });\n\n      // Calculate financial insights using Firebase Functions\n      try {\n        const result = await calculateFinancialInsights({\n          financialData: data\n        });\n        // Merge insights with the financial data\n        const enhancedData = {\n          ...data,\n          insights: result.data\n        };\n        setUserFinancialData(enhancedData);\n        localStorage.setItem('userFinancialData', JSON.stringify(enhancedData));\n      } catch (fnError) {\n        console.error('Error calculating insights:', fnError);\n        // Continue even if the cloud function fails\n      }\n      return true;\n    } catch (err) {\n      console.error('Error saving questionnaire data:', err);\n      setError('Failed to save questionnaire data');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  // Save dream life text and generate scenarios\n  async function saveDreamLifeText(text) {\n    setLoading(true);\n    try {\n      setDreamLifeText(text);\n\n      // Save to localStorage\n      localStorage.setItem('dreamLifeText', text);\n\n      // Save to Firestore if online\n      const sessionId = localStorage.getItem('sessionId') || `session-${Date.now()}`;\n      localStorage.setItem('sessionId', sessionId);\n      await setDoc(doc(db, 'anonymousData', sessionId), {\n        dreamLifeText: text,\n        timestamp: new Date()\n      }, {\n        merge: true\n      });\n\n      // Generate scenarios using the user's financial data and dream life text\n      if (userFinancialData) {\n        try {\n          const result = await generateScenarios({\n            financialData: userFinancialData,\n            dreamLifeText: text\n          });\n          if (result.data && result.data.scenarios) {\n            setFutureScenarios(result.data.scenarios);\n            localStorage.setItem('futureScenarios', JSON.stringify(result.data.scenarios));\n          }\n        } catch (fnError) {\n          console.error('Error generating scenarios:', fnError);\n          // If cloud function fails, use mock scenarios\n          // Set mock scenarios will be handled by the FutureScenarioPage component\n        }\n      }\n      return true;\n    } catch (err) {\n      console.error('Error saving dream life text:', err);\n      setError('Failed to save dream life text');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  // Save a new future scenario\n  async function saveFutureScenario(scenarioData) {\n    setLoading(true);\n    try {\n      const newScenario = {\n        id: `scenario-${Date.now()}`,\n        createdAt: new Date(),\n        ...scenarioData\n      };\n\n      // Update local state\n      setFutureScenarios(prev => [...prev, newScenario]);\n\n      // Save to localStorage\n      const savedScenarios = JSON.parse(localStorage.getItem('futureScenarios') || '[]');\n      savedScenarios.push(newScenario);\n      localStorage.setItem('futureScenarios', JSON.stringify(savedScenarios));\n\n      // Save to Firestore if online\n      const sessionId = localStorage.getItem('sessionId') || `session-${Date.now()}`;\n      localStorage.setItem('sessionId', sessionId);\n\n      // Add to a subcollection of scenarios for the anonymous user\n      const scenarioRef = doc(collection(db, 'anonymousData', sessionId, 'scenarios'));\n      await setDoc(scenarioRef, newScenario);\n      return true;\n    } catch (err) {\n      console.error('Error saving future scenario:', err);\n      setError('Failed to save future scenario');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }\n  const value = {\n    userFinancialData,\n    futureScenarios,\n    dreamLifeText,\n    loading,\n    error,\n    saveQuestionnaireData,\n    saveDreamLifeText,\n    saveFutureScenario\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n}\n_s2(DataProvider, \"CLVD4qMSy2aimaQ4VFh3k5TX8pE=\");\n_c = DataProvider;\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","db","generateScenarios","calculateFinancialInsights","collection","doc","setDoc","getDoc","getDocs","jsxDEV","_jsxDEV","DataContext","useData","_s","DataProvider","children","_s2","userFinancialData","setUserFinancialData","futureScenarios","setFutureScenarios","loading","setLoading","error","setError","dreamLifeText","setDreamLifeText","storedData","localStorage","getItem","storedDreamText","storedScenarios","JSON","parse","err","console","saveQuestionnaireData","data","setItem","stringify","sessionId","Date","now","financialData","timestamp","merge","result","enhancedData","insights","fnError","saveDreamLifeText","text","scenarios","saveFutureScenario","scenarioData","newScenario","id","createdAt","prev","savedScenarios","push","scenarioRef","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/luckyhappyfish/repos/Captial_One_Hack_Knight/finance-dam-visualizer-new/src/context/DataContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { db, generateScenarios, calculateFinancialInsights } from '../services/firebase';\nimport { collection, doc, setDoc, getDoc, getDocs } from 'firebase/firestore';\n\nconst DataContext = createContext();\n\nexport function useData() {\n  return useContext(DataContext);\n}\n\nexport function DataProvider({ children }) {\n  const [userFinancialData, setUserFinancialData] = useState(null);\n  const [futureScenarios, setFutureScenarios] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [dreamLifeText, setDreamLifeText] = useState('');\n  \n  // Load data from localStorage on initial load\n  useEffect(() => {\n    try {\n      const storedData = localStorage.getItem('userFinancialData');\n      const storedDreamText = localStorage.getItem('dreamLifeText');\n      const storedScenarios = localStorage.getItem('futureScenarios');\n      \n      if (storedData) {\n        setUserFinancialData(JSON.parse(storedData));\n      }\n      \n      if (storedDreamText) {\n        setDreamLifeText(storedDreamText);\n      }\n      \n      if (storedScenarios) {\n        setFutureScenarios(JSON.parse(storedScenarios));\n      }\n    } catch (err) {\n      console.error('Error loading data from localStorage:', err);\n    }\n  }, []);\n\n  // Save questionnaire data\n  async function saveQuestionnaireData(data) {\n    setLoading(true);\n    try {\n      // Store in local state\n      setUserFinancialData(data);\n      \n      // Save to localStorage\n      localStorage.setItem('userFinancialData', JSON.stringify(data));\n      \n      // Save to Firestore if online (anonymous document with a session ID)\n      const sessionId = localStorage.getItem('sessionId') || `session-${Date.now()}`;\n      localStorage.setItem('sessionId', sessionId);\n      \n      await setDoc(doc(db, 'anonymousData', sessionId), {\n        financialData: data,\n        timestamp: new Date()\n      }, { merge: true });\n      \n      // Calculate financial insights using Firebase Functions\n      try {\n        const result = await calculateFinancialInsights({ financialData: data });\n        // Merge insights with the financial data\n        const enhancedData = {\n          ...data,\n          insights: result.data\n        };\n        setUserFinancialData(enhancedData);\n        localStorage.setItem('userFinancialData', JSON.stringify(enhancedData));\n      } catch (fnError) {\n        console.error('Error calculating insights:', fnError);\n        // Continue even if the cloud function fails\n      }\n      \n      return true;\n    } catch (err) {\n      console.error('Error saving questionnaire data:', err);\n      setError('Failed to save questionnaire data');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  // Save dream life text and generate scenarios\n  async function saveDreamLifeText(text) {\n    setLoading(true);\n    try {\n      setDreamLifeText(text);\n      \n      // Save to localStorage\n      localStorage.setItem('dreamLifeText', text);\n      \n      // Save to Firestore if online\n      const sessionId = localStorage.getItem('sessionId') || `session-${Date.now()}`;\n      localStorage.setItem('sessionId', sessionId);\n      \n      await setDoc(doc(db, 'anonymousData', sessionId), {\n        dreamLifeText: text,\n        timestamp: new Date()\n      }, { merge: true });\n      \n      // Generate scenarios using the user's financial data and dream life text\n      if (userFinancialData) {\n        try {\n          const result = await generateScenarios({ \n            financialData: userFinancialData,\n            dreamLifeText: text \n          });\n          \n          if (result.data && result.data.scenarios) {\n            setFutureScenarios(result.data.scenarios);\n            localStorage.setItem('futureScenarios', JSON.stringify(result.data.scenarios));\n          }\n        } catch (fnError) {\n          console.error('Error generating scenarios:', fnError);\n          // If cloud function fails, use mock scenarios\n          // Set mock scenarios will be handled by the FutureScenarioPage component\n        }\n      }\n      \n      return true;\n    } catch (err) {\n      console.error('Error saving dream life text:', err);\n      setError('Failed to save dream life text');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  // Save a new future scenario\n  async function saveFutureScenario(scenarioData) {\n    setLoading(true);\n    try {\n      const newScenario = {\n        id: `scenario-${Date.now()}`,\n        createdAt: new Date(),\n        ...scenarioData\n      };\n      \n      // Update local state\n      setFutureScenarios(prev => [...prev, newScenario]);\n      \n      // Save to localStorage\n      const savedScenarios = JSON.parse(localStorage.getItem('futureScenarios') || '[]');\n      savedScenarios.push(newScenario);\n      localStorage.setItem('futureScenarios', JSON.stringify(savedScenarios));\n      \n      // Save to Firestore if online\n      const sessionId = localStorage.getItem('sessionId') || `session-${Date.now()}`;\n      localStorage.setItem('sessionId', sessionId);\n      \n      // Add to a subcollection of scenarios for the anonymous user\n      const scenarioRef = doc(collection(db, 'anonymousData', sessionId, 'scenarios'));\n      await setDoc(scenarioRef, newScenario);\n      \n      return true;\n    } catch (err) {\n      console.error('Error saving future scenario:', err);\n      setError('Failed to save future scenario');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const value = {\n    userFinancialData,\n    futureScenarios,\n    dreamLifeText,\n    loading,\n    error,\n    saveQuestionnaireData,\n    saveDreamLifeText,\n    saveFutureScenario\n  };\n\n  return (\n    <DataContext.Provider value={value}>\n      {children}\n    </DataContext.Provider>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}