{"ast":null,"code":"var _jsxFileName = \"/Users/franksu/Documents/Personal projects /hackathon 1 /Captial_One_Hack_Knight/finance-dam-visualizer-new/src/context/DataContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { db, generateScenarios, calculateFinancialInsights } from '../services/firebase';\nimport { collection, doc, setDoc, getDoc, getDocs } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext();\nexport function useData() {\n  _s();\n  return useContext(DataContext);\n}\n_s(useData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function DataProvider({\n  children\n}) {\n  _s2();\n  const [userFinancialData, setUserFinancialData] = useState(null);\n  const [futureScenarios, setFutureScenarios] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [dreamLifeText, setDreamLifeText] = useState('');\n\n  // Load data from localStorage on initial load\n  useEffect(() => {\n    try {\n      const storedData = localStorage.getItem('userFinancialData');\n      const storedDreamText = localStorage.getItem('dreamLifeText');\n      const storedScenarios = localStorage.getItem('futureScenarios');\n      if (storedData) {\n        setUserFinancialData(JSON.parse(storedData));\n      }\n      if (storedDreamText) {\n        setDreamLifeText(storedDreamText);\n      }\n      if (storedScenarios) {\n        setFutureScenarios(JSON.parse(storedScenarios));\n      }\n    } catch (err) {\n      console.error('Error loading data from localStorage:', err);\n    }\n  }, []);\n\n  // Save questionnaire data\n  async function saveQuestionnaireData(data) {\n    setLoading(true);\n    try {\n      // Store in local state\n      setUserFinancialData(data);\n\n      // Save to localStorage\n      localStorage.setItem('userFinancialData', JSON.stringify(data));\n\n      // Save to Firestore if online (anonymous document with a session ID)\n      const sessionId = localStorage.getItem('sessionId') || `session-${Date.now()}`;\n      localStorage.setItem('sessionId', sessionId);\n      await setDoc(doc(db, 'anonymousData', sessionId), {\n        financialData: data,\n        timestamp: new Date()\n      }, {\n        merge: true\n      });\n\n      // Calculate financial insights using Firebase Functions\n      try {\n        const result = await calculateFinancialInsights({\n          financialData: data\n        });\n        // Merge insights with the financial data\n        const enhancedData = {\n          ...data,\n          insights: result.data\n        };\n        setUserFinancialData(enhancedData);\n        localStorage.setItem('userFinancialData', JSON.stringify(enhancedData));\n      } catch (fnError) {\n        console.error('Error calculating insights:', fnError);\n        // Continue even if the cloud function fails\n      }\n      return true;\n    } catch (err) {\n      console.error('Error saving questionnaire data:', err);\n      setError('Failed to save questionnaire data');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  // Save dream life text and generate scenarios\n  async function saveDreamLifeText(text) {\n    setLoading(true);\n    try {\n      setDreamLifeText(text);\n\n      // Save to localStorage\n      localStorage.setItem('dreamLifeText', text);\n\n      // Save to Firestore if online\n      const sessionId = localStorage.getItem('sessionId') || `session-${Date.now()}`;\n      localStorage.setItem('sessionId', sessionId);\n      try {\n        await setDoc(doc(db, 'anonymousData', sessionId), {\n          dreamLifeText: text,\n          timestamp: new Date()\n        }, {\n          merge: true\n        });\n      } catch (firestoreError) {\n        console.log('Could not save to Firestore, continuing with local processing:', firestoreError);\n      }\n\n      // Generate scenarios using the user's financial data and dream life text\n      if (userFinancialData) {\n        try {\n          // Try using Firebase Cloud Function if available\n          const result = await generateScenarios({\n            financialData: userFinancialData,\n            dreamLifeText: text\n          });\n          if (result.data && result.data.scenarios) {\n            setFutureScenarios(result.data.scenarios);\n            localStorage.setItem('futureScenarios', JSON.stringify(result.data.scenarios));\n          }\n        } catch (fnError) {\n          console.log('Generating scenarios locally instead of using Firebase...');\n\n          // Generate scenarios locally using the user's financial data\n          const localScenarios = generateLocalScenarios(userFinancialData, text);\n          setFutureScenarios(localScenarios);\n          localStorage.setItem('futureScenarios', JSON.stringify(localScenarios));\n        }\n      }\n      return true;\n    } catch (err) {\n      console.error('Error saving dream life text:', err);\n      setError('Failed to save dream life text');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  // Local function to generate scenarios based on user data\n  function generateLocalScenarios(financialData, dreamLifeText) {\n    // Extract relevant financial information\n    const {\n      netWorth = 0,\n      monthlyCashFlow = 0,\n      assets = {\n        totalAssets: 0\n      },\n      liabilities = {\n        totalLiabilities: 0\n      },\n      income = {\n        totalIncome: 0\n      },\n      expenses = {\n        totalExpenses: 0\n      },\n      spendingCategories = []\n    } = financialData;\n\n    // Create base scenarios\n    let scenarios = [{\n      id: 'scenario-career',\n      title: 'Career Advancement Path',\n      subtitle: '5-Year Plan: Professional Growth',\n      tags: ['Career', 'Education', 'Investment'],\n      dreamLifeText: dreamLifeText\n    }, {\n      id: 'scenario-entrepreneur',\n      title: 'Entrepreneurial Journey',\n      subtitle: '7-Year Plan: Building Your Business',\n      tags: ['Entrepreneurship', 'Investment', 'Lifestyle'],\n      dreamLifeText: dreamLifeText\n    }, {\n      id: 'scenario-remote',\n      title: 'Remote Work & Geographic Arbitrage',\n      subtitle: '3-Year Plan: Lifestyle Design',\n      tags: ['Career', 'Travel', 'Lifestyle'],\n      dreamLifeText: dreamLifeText\n    }];\n\n    // Process each scenario with financial projections\n    return scenarios.map(scenario => {\n      // Different multipliers based on scenario type\n      let assetMultiplier, liabilityMultiplier, incomeMultiplier, expenseMultiplier;\n      let spendingCategoryAdjustments = {};\n      let yearsProjection;\n      switch (scenario.id) {\n        case 'scenario-career':\n          // Career advancement: Higher income, moderate expenses, reduced liabilities\n          assetMultiplier = 2.5;\n          liabilityMultiplier = 0.6;\n          incomeMultiplier = 1.9;\n          expenseMultiplier = 1.25;\n          yearsProjection = 5;\n          spendingCategoryAdjustments = {\n            'Education': 1.5,\n            // Increase education spending\n            'Housing': 1.2,\n            // Slightly higher housing cost\n            'Entertainment': 1.3,\n            // More entertainment\n            'Savings': 2.0 // Much higher savings\n          };\n          scenario.description = createCareerDescription(financialData, incomeMultiplier);\n          break;\n        case 'scenario-entrepreneur':\n          // Entrepreneurship: Much higher assets/income but initially more liabilities\n          assetMultiplier = 3.8;\n          liabilityMultiplier = 1.0;\n          incomeMultiplier = 2.4;\n          expenseMultiplier = 1.4;\n          yearsProjection = 7;\n          spendingCategoryAdjustments = {\n            'Business': 3.0,\n            // New business expenses\n            'Housing': 1.2,\n            // Similar housing\n            'Entertainment': 0.8,\n            // Less entertainment initially\n            'Savings': 1.5 // Good savings\n          };\n          scenario.description = createEntrepreneurDescription(financialData, incomeMultiplier);\n          break;\n        case 'scenario-remote':\n          // Remote work: Moderate asset growth, reduced expenses due to geographic arbitrage\n          assetMultiplier = 1.8;\n          liabilityMultiplier = 0.5;\n          incomeMultiplier = 1.4;\n          expenseMultiplier = 0.7; // Much lower expenses\n          yearsProjection = 3;\n          spendingCategoryAdjustments = {\n            'Housing': 0.5,\n            // Much lower housing cost\n            'Food': 0.7,\n            // Lower food costs\n            'Transportation': 0.5,\n            // Lower transportation\n            'Travel': 2.0,\n            // Much higher travel\n            'Utilities': 0.6,\n            // Lower utilities\n            'Savings': 2.0 // Much higher savings\n          };\n          scenario.description = createRemoteWorkDescription(financialData, expenseMultiplier);\n          break;\n      }\n\n      // Calculate projected financial values\n      const projectedAssets = Math.round(assets.totalAssets * assetMultiplier);\n      const projectedLiabilities = Math.round(liabilities.totalLiabilities * liabilityMultiplier);\n      const projectedNetWorth = projectedAssets - projectedLiabilities;\n      const projectedMonthlyIncome = Math.round(income.totalIncome * incomeMultiplier);\n      const projectedMonthlyExpenses = Math.round(expenses.totalExpenses * expenseMultiplier);\n\n      // Create projected spending categories\n      const projectedSpendingCategories = createProjectedSpendingCategories(spendingCategories, spendingCategoryAdjustments, projectedMonthlyExpenses);\n      return {\n        ...scenario,\n        financialData: {\n          totalAssets: projectedAssets,\n          totalLiabilities: projectedLiabilities,\n          netWorth: projectedNetWorth,\n          monthlyIncome: projectedMonthlyIncome,\n          monthlyExpenses: projectedMonthlyExpenses\n        },\n        spendingCategories: projectedSpendingCategories,\n        damTitle: `Projected Financial State (${yearsProjection} Years)`\n      };\n    });\n  }\n\n  // Create projected spending categories based on original data and adjustments\n  function createProjectedSpendingCategories(originalCategories, adjustments, totalProjectedExpenses) {\n    // Default categories if no original data exists\n    const defaultCategories = [{\n      name: 'Housing',\n      amount: totalProjectedExpenses * 0.35,\n      color: 'rgba(255, 128, 66, 0.8)'\n    }, {\n      name: 'Food',\n      amount: totalProjectedExpenses * 0.15,\n      color: 'rgba(255, 187, 40, 0.8)'\n    }, {\n      name: 'Transportation',\n      amount: totalProjectedExpenses * 0.08,\n      color: 'rgba(136, 132, 216, 0.8)'\n    }, {\n      name: 'Utilities',\n      amount: totalProjectedExpenses * 0.07,\n      color: 'rgba(0, 196, 159, 0.8)'\n    }, {\n      name: 'Entertainment',\n      amount: totalProjectedExpenses * 0.10,\n      color: 'rgba(238, 82, 83, 0.8)'\n    }, {\n      name: 'Savings',\n      amount: totalProjectedExpenses * 0.15,\n      color: 'rgba(72, 52, 212, 0.8)'\n    }, {\n      name: 'Other',\n      amount: totalProjectedExpenses * 0.10,\n      color: 'rgba(0, 136, 254, 0.8)'\n    }];\n\n    // If we have original categories, adjust them\n    let result = [];\n    if (originalCategories && originalCategories.length > 0) {\n      // Start with copying original categories\n      result = originalCategories.map(category => ({\n        ...category,\n        amount: Math.round(category.amount * (adjustments[category.name] || 1.0))\n      }));\n\n      // Add any missing categories from adjustments\n      Object.keys(adjustments).forEach(categoryName => {\n        if (!result.some(cat => cat.name === categoryName)) {\n          // Find a default color for this category\n          const defaultCategory = defaultCategories.find(c => c.name === categoryName) || {\n            color: 'rgba(0, 136, 254, 0.8)'\n          };\n\n          // Add the new category\n          result.push({\n            name: categoryName,\n            amount: Math.round(totalProjectedExpenses * 0.10 * adjustments[categoryName]),\n            color: defaultCategory.color\n          });\n        }\n      });\n    } else {\n      // Use default categories with adjustments\n      result = defaultCategories.map(category => ({\n        ...category,\n        amount: Math.round(category.amount * (adjustments[category.name] || 1.0))\n      }));\n    }\n\n    // Calculate total after adjustments\n    const totalAmount = result.reduce((sum, cat) => sum + cat.amount, 0);\n\n    // Normalize to ensure total matches projected expenses\n    const normalizedResult = result.map(category => {\n      const normalizedAmount = Math.round(category.amount / totalAmount * totalProjectedExpenses);\n      return {\n        ...category,\n        amount: normalizedAmount,\n        percentage: (normalizedAmount / totalProjectedExpenses * 100).toFixed(1)\n      };\n    });\n    return normalizedResult;\n  }\n\n  // Create descriptions for each scenario\n  function createCareerDescription(financialData, incomeMultiplier) {\n    const projectedIncome = Math.round(financialData.income.totalIncome * incomeMultiplier);\n    const annualIncome = projectedIncome * 12;\n    return `\n      <p>This scenario involves advancing in your career path over the next 5 years, with a focus on professional growth, skill development, and income expansion.</p>\n      \n      <p><strong>Years 1-2:</strong></p>\n      <ul>\n        <li>Invest in professional development and certifications relevant to your field</li>\n        <li>Actively pursue promotions or higher-paying positions</li>\n        <li>Build your professional network through industry events and connections</li>\n        <li>Increase retirement contributions as your income grows</li>\n      </ul>\n      \n      <p><strong>Years 3-5:</strong></p>\n      <ul>\n        <li>Reach a target income of approximately $${Math.round(annualIncome / 1000)}k per year</li>\n        <li>Accelerate debt repayment with your increased income</li>\n        <li>Maximize employer benefits and retirement matching</li>\n        <li>Build a robust emergency fund covering 6 months of expenses</li>\n        <li>Start diversifying investments beyond retirement accounts</li>\n      </ul>\n      \n      <p>This approach provides a steady, reliable progression toward your financial goals while maintaining work-life balance and job security.</p>\n    `;\n  }\n  function createEntrepreneurDescription(financialData, incomeMultiplier) {\n    const projectedIncome = Math.round(financialData.income.totalIncome * incomeMultiplier);\n    const annualIncome = projectedIncome * 12;\n    return `\n      <p>This scenario involves transitioning to entrepreneurship over a 7-year period, building a business aligned with your skills and interests.</p>\n      \n      <p><strong>Years 1-2: Planning & Foundation</strong></p>\n      <ul>\n        <li>Maintain your current job while developing your business plan</li>\n        <li>Build skills necessary for your business venture</li>\n        <li>Save 25-30% of your income for startup costs</li>\n        <li>Begin testing your business concept with minimal investment</li>\n      </ul>\n      \n      <p><strong>Years 3-5: Launch & Growth</strong></p>\n      <ul>\n        <li>Transition to part-time employment or full entrepreneurship</li>\n        <li>Focus on customer acquisition and business development</li>\n        <li>Reinvest profits to accelerate growth</li>\n        <li>Create systems to maximize efficiency and scalability</li>\n      </ul>\n      \n      <p><strong>Years 6-7: Maturity & Optimization</strong></p>\n      <ul>\n        <li>Reach a target income of approximately $${Math.round(annualIncome / 1000)}k annually</li>\n        <li>Build a team or systems that reduce your direct involvement</li>\n        <li>Focus on high-value activities that leverage your unique skills</li>\n        <li>Create multiple revenue streams within your business</li>\n      </ul>\n      \n      <p>This path offers the greatest long-term income potential and lifestyle flexibility, though with higher initial risk and workload.</p>\n    `;\n  }\n  function createRemoteWorkDescription(financialData, expenseMultiplier) {\n    const projectedExpenses = Math.round(financialData.expenses.totalExpenses * expenseMultiplier);\n    const savings = financialData.income.totalIncome - projectedExpenses;\n    const savingsRate = Math.round(savings / financialData.income.totalIncome * 100);\n    return `\n      <p>This scenario leverages geographic arbitrage and remote work to dramatically reduce your living expenses while maintaining your income, creating a location-independent lifestyle.</p>\n      \n      <p><strong>Year 1: Remote Transition</strong></p>\n      <ul>\n        <li>Negotiate remote work with your current employer or find a remote position</li>\n        <li>Develop digital skills that support location independence</li>\n        <li>Research lower cost-of-living locations that match your lifestyle preferences</li>\n        <li>Build a 6-month emergency fund as safety net</li>\n      </ul>\n      \n      <p><strong>Year 2: Relocation & Optimization</strong></p>\n      <ul>\n        <li>Relocate to an area with 30-50% lower cost of living</li>\n        <li>Maintain your current income while reducing expenses</li>\n        <li>Achieve a savings rate of approximately ${savingsRate}%</li>\n        <li>Create tax-optimized financial structures for expatriate living</li>\n      </ul>\n      \n      <p><strong>Year 3: Lifestyle Enhancement</strong></p>\n      <ul>\n        <li>Establish a sustainable remote work routine</li>\n        <li>Explore multiple \"home bases\" for varied experiences</li>\n        <li>Begin building passive income through investments</li>\n        <li>Potentially reduce work hours while maintaining financial goals</li>\n      </ul>\n      \n      <p>This approach allows you to maintain your career while dramatically improving your financial position and creating the freedom to live where you prefer.</p>\n    `;\n  }\n\n  // Save a new future scenario\n  async function saveFutureScenario(scenarioData) {\n    setLoading(true);\n    try {\n      const newScenario = {\n        id: `scenario-${Date.now()}`,\n        createdAt: new Date(),\n        ...scenarioData\n      };\n\n      // Update local state\n      setFutureScenarios(prev => [...prev, newScenario]);\n\n      // Save to localStorage\n      const savedScenarios = JSON.parse(localStorage.getItem('futureScenarios') || '[]');\n      savedScenarios.push(newScenario);\n      localStorage.setItem('futureScenarios', JSON.stringify(savedScenarios));\n\n      // Save to Firestore if online\n      const sessionId = localStorage.getItem('sessionId') || `session-${Date.now()}`;\n      localStorage.setItem('sessionId', sessionId);\n\n      // Add to a subcollection of scenarios for the anonymous user\n      const scenarioRef = doc(collection(db, 'anonymousData', sessionId, 'scenarios'));\n      await setDoc(scenarioRef, newScenario);\n      return true;\n    } catch (err) {\n      console.error('Error saving future scenario:', err);\n      setError('Failed to save future scenario');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }\n  const value = {\n    userFinancialData,\n    futureScenarios,\n    dreamLifeText,\n    loading,\n    error,\n    saveQuestionnaireData,\n    saveDreamLifeText,\n    saveFutureScenario\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 475,\n    columnNumber: 5\n  }, this);\n}\n_s2(DataProvider, \"CLVD4qMSy2aimaQ4VFh3k5TX8pE=\");\n_c = DataProvider;\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","db","generateScenarios","calculateFinancialInsights","collection","doc","setDoc","getDoc","getDocs","jsxDEV","_jsxDEV","DataContext","useData","_s","DataProvider","children","_s2","userFinancialData","setUserFinancialData","futureScenarios","setFutureScenarios","loading","setLoading","error","setError","dreamLifeText","setDreamLifeText","storedData","localStorage","getItem","storedDreamText","storedScenarios","JSON","parse","err","console","saveQuestionnaireData","data","setItem","stringify","sessionId","Date","now","financialData","timestamp","merge","result","enhancedData","insights","fnError","saveDreamLifeText","text","firestoreError","log","scenarios","localScenarios","generateLocalScenarios","netWorth","monthlyCashFlow","assets","totalAssets","liabilities","totalLiabilities","income","totalIncome","expenses","totalExpenses","spendingCategories","id","title","subtitle","tags","map","scenario","assetMultiplier","liabilityMultiplier","incomeMultiplier","expenseMultiplier","spendingCategoryAdjustments","yearsProjection","description","createCareerDescription","createEntrepreneurDescription","createRemoteWorkDescription","projectedAssets","Math","round","projectedLiabilities","projectedNetWorth","projectedMonthlyIncome","projectedMonthlyExpenses","projectedSpendingCategories","createProjectedSpendingCategories","monthlyIncome","monthlyExpenses","damTitle","originalCategories","adjustments","totalProjectedExpenses","defaultCategories","name","amount","color","length","category","Object","keys","forEach","categoryName","some","cat","defaultCategory","find","c","push","totalAmount","reduce","sum","normalizedResult","normalizedAmount","percentage","toFixed","projectedIncome","annualIncome","projectedExpenses","savings","savingsRate","saveFutureScenario","scenarioData","newScenario","createdAt","prev","savedScenarios","scenarioRef","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/franksu/Documents/Personal projects /hackathon 1 /Captial_One_Hack_Knight/finance-dam-visualizer-new/src/context/DataContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { db, generateScenarios, calculateFinancialInsights } from '../services/firebase';\nimport { collection, doc, setDoc, getDoc, getDocs } from 'firebase/firestore';\n\nconst DataContext = createContext();\n\nexport function useData() {\n  return useContext(DataContext);\n}\n\nexport function DataProvider({ children }) {\n  const [userFinancialData, setUserFinancialData] = useState(null);\n  const [futureScenarios, setFutureScenarios] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [dreamLifeText, setDreamLifeText] = useState('');\n  \n  // Load data from localStorage on initial load\n  useEffect(() => {\n    try {\n      const storedData = localStorage.getItem('userFinancialData');\n      const storedDreamText = localStorage.getItem('dreamLifeText');\n      const storedScenarios = localStorage.getItem('futureScenarios');\n      \n      if (storedData) {\n        setUserFinancialData(JSON.parse(storedData));\n      }\n      \n      if (storedDreamText) {\n        setDreamLifeText(storedDreamText);\n      }\n      \n      if (storedScenarios) {\n        setFutureScenarios(JSON.parse(storedScenarios));\n      }\n    } catch (err) {\n      console.error('Error loading data from localStorage:', err);\n    }\n  }, []);\n\n  // Save questionnaire data\n  async function saveQuestionnaireData(data) {\n    setLoading(true);\n    try {\n      // Store in local state\n      setUserFinancialData(data);\n      \n      // Save to localStorage\n      localStorage.setItem('userFinancialData', JSON.stringify(data));\n      \n      // Save to Firestore if online (anonymous document with a session ID)\n      const sessionId = localStorage.getItem('sessionId') || `session-${Date.now()}`;\n      localStorage.setItem('sessionId', sessionId);\n      \n      await setDoc(doc(db, 'anonymousData', sessionId), {\n        financialData: data,\n        timestamp: new Date()\n      }, { merge: true });\n      \n      // Calculate financial insights using Firebase Functions\n      try {\n        const result = await calculateFinancialInsights({ financialData: data });\n        // Merge insights with the financial data\n        const enhancedData = {\n          ...data,\n          insights: result.data\n        };\n        setUserFinancialData(enhancedData);\n        localStorage.setItem('userFinancialData', JSON.stringify(enhancedData));\n      } catch (fnError) {\n        console.error('Error calculating insights:', fnError);\n        // Continue even if the cloud function fails\n      }\n      \n      return true;\n    } catch (err) {\n      console.error('Error saving questionnaire data:', err);\n      setError('Failed to save questionnaire data');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  // Save dream life text and generate scenarios\n  async function saveDreamLifeText(text) {\n    setLoading(true);\n    try {\n      setDreamLifeText(text);\n      \n      // Save to localStorage\n      localStorage.setItem('dreamLifeText', text);\n      \n      // Save to Firestore if online\n      const sessionId = localStorage.getItem('sessionId') || `session-${Date.now()}`;\n      localStorage.setItem('sessionId', sessionId);\n      \n      try {\n        await setDoc(doc(db, 'anonymousData', sessionId), {\n          dreamLifeText: text,\n          timestamp: new Date()\n        }, { merge: true });\n      } catch (firestoreError) {\n        console.log('Could not save to Firestore, continuing with local processing:', firestoreError);\n      }\n      \n      // Generate scenarios using the user's financial data and dream life text\n      if (userFinancialData) {\n        try {\n          // Try using Firebase Cloud Function if available\n          const result = await generateScenarios({ \n            financialData: userFinancialData,\n            dreamLifeText: text \n          });\n          \n          if (result.data && result.data.scenarios) {\n            setFutureScenarios(result.data.scenarios);\n            localStorage.setItem('futureScenarios', JSON.stringify(result.data.scenarios));\n          }\n        } catch (fnError) {\n          console.log('Generating scenarios locally instead of using Firebase...');\n          \n          // Generate scenarios locally using the user's financial data\n          const localScenarios = generateLocalScenarios(userFinancialData, text);\n          setFutureScenarios(localScenarios);\n          localStorage.setItem('futureScenarios', JSON.stringify(localScenarios));\n        }\n      }\n      \n      return true;\n    } catch (err) {\n      console.error('Error saving dream life text:', err);\n      setError('Failed to save dream life text');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }\n  \n  // Local function to generate scenarios based on user data\n  function generateLocalScenarios(financialData, dreamLifeText) {\n    // Extract relevant financial information\n    const {\n      netWorth = 0,\n      monthlyCashFlow = 0,\n      assets = { totalAssets: 0 },\n      liabilities = { totalLiabilities: 0 },\n      income = { totalIncome: 0 },\n      expenses = { totalExpenses: 0 },\n      spendingCategories = []\n    } = financialData;\n    \n    // Create base scenarios\n    let scenarios = [\n      {\n        id: 'scenario-career',\n        title: 'Career Advancement Path',\n        subtitle: '5-Year Plan: Professional Growth',\n        tags: ['Career', 'Education', 'Investment'],\n        dreamLifeText: dreamLifeText\n      },\n      {\n        id: 'scenario-entrepreneur',\n        title: 'Entrepreneurial Journey',\n        subtitle: '7-Year Plan: Building Your Business',\n        tags: ['Entrepreneurship', 'Investment', 'Lifestyle'],\n        dreamLifeText: dreamLifeText\n      },\n      {\n        id: 'scenario-remote',\n        title: 'Remote Work & Geographic Arbitrage',\n        subtitle: '3-Year Plan: Lifestyle Design',\n        tags: ['Career', 'Travel', 'Lifestyle'],\n        dreamLifeText: dreamLifeText\n      }\n    ];\n    \n    // Process each scenario with financial projections\n    return scenarios.map(scenario => {\n      // Different multipliers based on scenario type\n      let assetMultiplier, liabilityMultiplier, incomeMultiplier, expenseMultiplier;\n      let spendingCategoryAdjustments = {};\n      let yearsProjection;\n      \n      switch(scenario.id) {\n        case 'scenario-career':\n          // Career advancement: Higher income, moderate expenses, reduced liabilities\n          assetMultiplier = 2.5;\n          liabilityMultiplier = 0.6;\n          incomeMultiplier = 1.9;\n          expenseMultiplier = 1.25;\n          yearsProjection = 5;\n          spendingCategoryAdjustments = {\n            'Education': 1.5,    // Increase education spending\n            'Housing': 1.2,      // Slightly higher housing cost\n            'Entertainment': 1.3, // More entertainment\n            'Savings': 2.0       // Much higher savings\n          };\n          scenario.description = createCareerDescription(financialData, incomeMultiplier);\n          break;\n          \n        case 'scenario-entrepreneur':\n          // Entrepreneurship: Much higher assets/income but initially more liabilities\n          assetMultiplier = 3.8;\n          liabilityMultiplier = 1.0;\n          incomeMultiplier = 2.4;\n          expenseMultiplier = 1.4;\n          yearsProjection = 7;\n          spendingCategoryAdjustments = {\n            'Business': 3.0,      // New business expenses\n            'Housing': 1.2,       // Similar housing\n            'Entertainment': 0.8, // Less entertainment initially\n            'Savings': 1.5        // Good savings\n          };\n          scenario.description = createEntrepreneurDescription(financialData, incomeMultiplier);\n          break;\n          \n        case 'scenario-remote':\n          // Remote work: Moderate asset growth, reduced expenses due to geographic arbitrage\n          assetMultiplier = 1.8;\n          liabilityMultiplier = 0.5;\n          incomeMultiplier = 1.4;\n          expenseMultiplier = 0.7; // Much lower expenses\n          yearsProjection = 3;\n          spendingCategoryAdjustments = {\n            'Housing': 0.5,       // Much lower housing cost\n            'Food': 0.7,          // Lower food costs\n            'Transportation': 0.5, // Lower transportation\n            'Travel': 2.0,        // Much higher travel\n            'Utilities': 0.6,     // Lower utilities\n            'Savings': 2.0        // Much higher savings\n          };\n          scenario.description = createRemoteWorkDescription(financialData, expenseMultiplier);\n          break;\n      }\n      \n      // Calculate projected financial values\n      const projectedAssets = Math.round(assets.totalAssets * assetMultiplier);\n      const projectedLiabilities = Math.round(liabilities.totalLiabilities * liabilityMultiplier);\n      const projectedNetWorth = projectedAssets - projectedLiabilities;\n      const projectedMonthlyIncome = Math.round(income.totalIncome * incomeMultiplier);\n      const projectedMonthlyExpenses = Math.round(expenses.totalExpenses * expenseMultiplier);\n      \n      // Create projected spending categories\n      const projectedSpendingCategories = createProjectedSpendingCategories(\n        spendingCategories, \n        spendingCategoryAdjustments,\n        projectedMonthlyExpenses\n      );\n      \n      return {\n        ...scenario,\n        financialData: {\n          totalAssets: projectedAssets,\n          totalLiabilities: projectedLiabilities,\n          netWorth: projectedNetWorth,\n          monthlyIncome: projectedMonthlyIncome,\n          monthlyExpenses: projectedMonthlyExpenses\n        },\n        spendingCategories: projectedSpendingCategories,\n        damTitle: `Projected Financial State (${yearsProjection} Years)`\n      };\n    });\n  }\n  \n  // Create projected spending categories based on original data and adjustments\n  function createProjectedSpendingCategories(originalCategories, adjustments, totalProjectedExpenses) {\n    // Default categories if no original data exists\n    const defaultCategories = [\n      { name: 'Housing', amount: totalProjectedExpenses * 0.35, color: 'rgba(255, 128, 66, 0.8)' },\n      { name: 'Food', amount: totalProjectedExpenses * 0.15, color: 'rgba(255, 187, 40, 0.8)' },\n      { name: 'Transportation', amount: totalProjectedExpenses * 0.08, color: 'rgba(136, 132, 216, 0.8)' },\n      { name: 'Utilities', amount: totalProjectedExpenses * 0.07, color: 'rgba(0, 196, 159, 0.8)' },\n      { name: 'Entertainment', amount: totalProjectedExpenses * 0.10, color: 'rgba(238, 82, 83, 0.8)' },\n      { name: 'Savings', amount: totalProjectedExpenses * 0.15, color: 'rgba(72, 52, 212, 0.8)' },\n      { name: 'Other', amount: totalProjectedExpenses * 0.10, color: 'rgba(0, 136, 254, 0.8)' }\n    ];\n    \n    // If we have original categories, adjust them\n    let result = [];\n    if (originalCategories && originalCategories.length > 0) {\n      // Start with copying original categories\n      result = originalCategories.map(category => ({\n        ...category,\n        amount: Math.round(category.amount * (adjustments[category.name] || 1.0))\n      }));\n      \n      // Add any missing categories from adjustments\n      Object.keys(adjustments).forEach(categoryName => {\n        if (!result.some(cat => cat.name === categoryName)) {\n          // Find a default color for this category\n          const defaultCategory = defaultCategories.find(c => c.name === categoryName) || \n                                 { color: 'rgba(0, 136, 254, 0.8)' };\n          \n          // Add the new category\n          result.push({\n            name: categoryName,\n            amount: Math.round(totalProjectedExpenses * 0.10 * adjustments[categoryName]),\n            color: defaultCategory.color\n          });\n        }\n      });\n    } else {\n      // Use default categories with adjustments\n      result = defaultCategories.map(category => ({\n        ...category,\n        amount: Math.round(category.amount * (adjustments[category.name] || 1.0))\n      }));\n    }\n    \n    // Calculate total after adjustments\n    const totalAmount = result.reduce((sum, cat) => sum + cat.amount, 0);\n    \n    // Normalize to ensure total matches projected expenses\n    const normalizedResult = result.map(category => {\n      const normalizedAmount = Math.round((category.amount / totalAmount) * totalProjectedExpenses);\n      return {\n        ...category,\n        amount: normalizedAmount,\n        percentage: ((normalizedAmount / totalProjectedExpenses) * 100).toFixed(1)\n      };\n    });\n    \n    return normalizedResult;\n  }\n  \n  // Create descriptions for each scenario\n  function createCareerDescription(financialData, incomeMultiplier) {\n    const projectedIncome = Math.round(financialData.income.totalIncome * incomeMultiplier);\n    const annualIncome = projectedIncome * 12;\n    \n    return `\n      <p>This scenario involves advancing in your career path over the next 5 years, with a focus on professional growth, skill development, and income expansion.</p>\n      \n      <p><strong>Years 1-2:</strong></p>\n      <ul>\n        <li>Invest in professional development and certifications relevant to your field</li>\n        <li>Actively pursue promotions or higher-paying positions</li>\n        <li>Build your professional network through industry events and connections</li>\n        <li>Increase retirement contributions as your income grows</li>\n      </ul>\n      \n      <p><strong>Years 3-5:</strong></p>\n      <ul>\n        <li>Reach a target income of approximately $${Math.round(annualIncome/1000)}k per year</li>\n        <li>Accelerate debt repayment with your increased income</li>\n        <li>Maximize employer benefits and retirement matching</li>\n        <li>Build a robust emergency fund covering 6 months of expenses</li>\n        <li>Start diversifying investments beyond retirement accounts</li>\n      </ul>\n      \n      <p>This approach provides a steady, reliable progression toward your financial goals while maintaining work-life balance and job security.</p>\n    `;\n  }\n  \n  function createEntrepreneurDescription(financialData, incomeMultiplier) {\n    const projectedIncome = Math.round(financialData.income.totalIncome * incomeMultiplier);\n    const annualIncome = projectedIncome * 12;\n    \n    return `\n      <p>This scenario involves transitioning to entrepreneurship over a 7-year period, building a business aligned with your skills and interests.</p>\n      \n      <p><strong>Years 1-2: Planning & Foundation</strong></p>\n      <ul>\n        <li>Maintain your current job while developing your business plan</li>\n        <li>Build skills necessary for your business venture</li>\n        <li>Save 25-30% of your income for startup costs</li>\n        <li>Begin testing your business concept with minimal investment</li>\n      </ul>\n      \n      <p><strong>Years 3-5: Launch & Growth</strong></p>\n      <ul>\n        <li>Transition to part-time employment or full entrepreneurship</li>\n        <li>Focus on customer acquisition and business development</li>\n        <li>Reinvest profits to accelerate growth</li>\n        <li>Create systems to maximize efficiency and scalability</li>\n      </ul>\n      \n      <p><strong>Years 6-7: Maturity & Optimization</strong></p>\n      <ul>\n        <li>Reach a target income of approximately $${Math.round(annualIncome/1000)}k annually</li>\n        <li>Build a team or systems that reduce your direct involvement</li>\n        <li>Focus on high-value activities that leverage your unique skills</li>\n        <li>Create multiple revenue streams within your business</li>\n      </ul>\n      \n      <p>This path offers the greatest long-term income potential and lifestyle flexibility, though with higher initial risk and workload.</p>\n    `;\n  }\n  \n  function createRemoteWorkDescription(financialData, expenseMultiplier) {\n    const projectedExpenses = Math.round(financialData.expenses.totalExpenses * expenseMultiplier);\n    const savings = financialData.income.totalIncome - projectedExpenses;\n    const savingsRate = Math.round((savings / financialData.income.totalIncome) * 100);\n    \n    return `\n      <p>This scenario leverages geographic arbitrage and remote work to dramatically reduce your living expenses while maintaining your income, creating a location-independent lifestyle.</p>\n      \n      <p><strong>Year 1: Remote Transition</strong></p>\n      <ul>\n        <li>Negotiate remote work with your current employer or find a remote position</li>\n        <li>Develop digital skills that support location independence</li>\n        <li>Research lower cost-of-living locations that match your lifestyle preferences</li>\n        <li>Build a 6-month emergency fund as safety net</li>\n      </ul>\n      \n      <p><strong>Year 2: Relocation & Optimization</strong></p>\n      <ul>\n        <li>Relocate to an area with 30-50% lower cost of living</li>\n        <li>Maintain your current income while reducing expenses</li>\n        <li>Achieve a savings rate of approximately ${savingsRate}%</li>\n        <li>Create tax-optimized financial structures for expatriate living</li>\n      </ul>\n      \n      <p><strong>Year 3: Lifestyle Enhancement</strong></p>\n      <ul>\n        <li>Establish a sustainable remote work routine</li>\n        <li>Explore multiple \"home bases\" for varied experiences</li>\n        <li>Begin building passive income through investments</li>\n        <li>Potentially reduce work hours while maintaining financial goals</li>\n      </ul>\n      \n      <p>This approach allows you to maintain your career while dramatically improving your financial position and creating the freedom to live where you prefer.</p>\n    `;\n  }\n\n  // Save a new future scenario\n  async function saveFutureScenario(scenarioData) {\n    setLoading(true);\n    try {\n      const newScenario = {\n        id: `scenario-${Date.now()}`,\n        createdAt: new Date(),\n        ...scenarioData\n      };\n      \n      // Update local state\n      setFutureScenarios(prev => [...prev, newScenario]);\n      \n      // Save to localStorage\n      const savedScenarios = JSON.parse(localStorage.getItem('futureScenarios') || '[]');\n      savedScenarios.push(newScenario);\n      localStorage.setItem('futureScenarios', JSON.stringify(savedScenarios));\n      \n      // Save to Firestore if online\n      const sessionId = localStorage.getItem('sessionId') || `session-${Date.now()}`;\n      localStorage.setItem('sessionId', sessionId);\n      \n      // Add to a subcollection of scenarios for the anonymous user\n      const scenarioRef = doc(collection(db, 'anonymousData', sessionId, 'scenarios'));\n      await setDoc(scenarioRef, newScenario);\n      \n      return true;\n    } catch (err) {\n      console.error('Error saving future scenario:', err);\n      setError('Failed to save future scenario');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const value = {\n    userFinancialData,\n    futureScenarios,\n    dreamLifeText,\n    loading,\n    error,\n    saveQuestionnaireData,\n    saveDreamLifeText,\n    saveFutureScenario\n  };\n\n  return (\n    <DataContext.Provider value={value}>\n      {children}\n    </DataContext.Provider>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}