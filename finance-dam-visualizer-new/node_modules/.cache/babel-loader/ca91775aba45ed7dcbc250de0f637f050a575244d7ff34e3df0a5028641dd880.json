{"ast":null,"code":"var _jsxFileName = \"/Users/luckyhappyfish/repos/Captial_One_Hack_Knight/finance-dam-visualizer-new/src/components/visualizations/DamVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styled, { keyframes } from 'styled-components';\n\n//\n// -- Container & Basic Layout\n//\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VisualizationContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background: #16213e;\n  padding: 2rem;\n  border-radius: 16px;\n  margin-bottom: 2rem;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n  color: #fff;\n  width: 100%;\n`;\n_c = VisualizationContainer;\nconst Title = styled.h3`\n  margin-bottom: 1rem;\n  text-align: center;\n`;\n_c2 = Title;\nconst Description = styled.p`\n  color: #ccc;\n  text-align: center;\n  max-width: 800px;\n  margin-bottom: 2rem;\n`;\n\n//\n// -- Reservoir + Dam Visual\n//\n_c3 = Description;\nconst ReservoirWrapper = styled.div`\n  position: relative;\n  width: 80%;\n  max-width: 800px;\n  height: ${props => props.height}px;\n  margin-bottom: 2rem;\n  /* Potential background to illustrate land behind the reservoir */\n  background: linear-gradient(180deg, #1a1a2e 0%, #15213b 70%);\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.5);\n`;\n\n/**\n * The idea here is to create a container that has a shaped top edge (a “parabola” look).\n * We can do that with clip-path or an SVG approach. Below is a simple example with a clip-path\n * that might approximate a curved top. Adjust as desired.\n */\n_c4 = ReservoirWrapper;\nconst ReservoirWater = styled.div`\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  /* We'll fill the bottom with water. The top is shaped with clip-path. */\n  height: ${props => props.level}%;\n  background: linear-gradient(\n    180deg,\n    rgba(0, 112, 240, 0.8) 0%,\n    rgba(72, 198, 239, 0.6) 100%\n  );\n  box-shadow: inset 0 2px 10px rgba(255, 255, 255, 0.2);\n  transition: height 1s ease-in-out;\n\n  /* A “parabola-like” shape for the top edge of the water */\n  clip-path: polygon(\n    0% 100%,\n    0% 10%,\n    50% 0%,    /* highest point in the center */\n    100% 10%,\n    100% 100%\n  );\n`;\n\n/**\n * This is the large block that acts as the “dam” on one side.\n * Position it absolutely on the right (or left) so it looks like it’s\n * holding back the water.\n */\n_c5 = ReservoirWater;\nconst DamBlock = styled.div`\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  width: 60px;\n  height: 100%;\n  background: #555;\n  box-shadow: inset 0 0 10px rgba(0,0,0,0.6), 0 0 10px rgba(0,0,0,0.8);\n  border-top-left-radius: 12px;\n  border-bottom-left-radius: 12px;\n`;\n\n//\n// -- Water Flow Animation (vertical line)\n//\n_c6 = DamBlock;\nconst flowDown = keyframes`\n  0% { height: 0; opacity: 0.8; }\n  50% { height: 80%; opacity: 1; }\n  100% { height: 0; opacity: 0; }\n`;\nconst WaterOutflow = styled.div`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  width: 6px;\n  background: rgba(0, 162, 255, 0.8);\n  border-radius: 3px;\n  animation: ${flowDown} 2s linear infinite;\n  transform: translateX(100%); /* push it to the right side of the dam */\n`;\n\n//\n// -- Legend + Metrics\n//\n_c7 = WaterOutflow;\nconst Legend = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 1rem;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 12px;\n  padding: 1rem;\n  width: 100%;\n  margin-top: 1rem;\n`;\n_c8 = Legend;\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 1rem;\n\n  span {\n    width: 12px;\n    height: 12px;\n    background: ${props => props.color};\n    margin-right: 8px;\n    display: inline-block;\n    border-radius: 3px;\n  }\n`;\n_c9 = LegendItem;\nconst FinancialMetrics = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  width: 100%;\n  margin-top: 1rem;\n`;\n_c10 = FinancialMetrics;\nconst MetricCard = styled.div`\n  background: rgba(255, 255, 255, 0.1);\n  padding: 1rem;\n  border-radius: 12px;\n  margin: 0.5rem;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  width: 180px;\n  text-align: center;\n  backdrop-filter: blur(5px);\n  transition: all 0.3s ease;\n  \n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n  }\n  \n  h4 {\n    margin-top: 0;\n    font-size: 0.9rem;\n    font-weight: 500;\n    color: rgba(255, 255, 255, 0.7);\n  }\n  \n  p {\n    font-size: 1.3rem;\n    font-weight: 700;\n    margin-bottom: 0;\n    color: #fff;\n  }\n`;\n\n//\n// -- Main Component\n//\n_c11 = MetricCard;\nconst DamVisualization = ({\n  title = \"Financial Dam\",\n  description = \"A stylized 2D reservoir with a dam and animated water outflow.\",\n  financialData = {},\n  spendingCategories = [],\n  showMetrics = true,\n  showLegend = true,\n  height = 300\n}) => {\n  _s();\n  const [waterLevel, setWaterLevel] = useState(50);\n  const [incomeRate, setIncomeRate] = useState(5);\n  const [expenseRate, setExpenseRate] = useState(3);\n\n  // Extract financial metrics\n  const {\n    totalAssets = 100000,\n    totalLiabilities = 40000,\n    netWorth = totalAssets - totalLiabilities,\n    monthlyIncome = 5000,\n    monthlyExpenses = 3000\n  } = financialData;\n\n  // Default categories if none provided\n  const defaultSpendingCategories = [{\n    name: 'Housing',\n    color: 'rgba(255, 128, 66, 0.8)',\n    amount: 1200,\n    percentage: 30\n  }, {\n    name: 'Food',\n    color: 'rgba(255, 187, 40, 0.8)',\n    amount: 800,\n    percentage: 20\n  }, {\n    name: 'Transportation',\n    color: 'rgba(136, 132, 216, 0.8)',\n    amount: 400,\n    percentage: 10\n  }, {\n    name: 'Entertainment',\n    color: 'rgba(0, 136, 254, 0.8)',\n    amount: 300,\n    percentage: 7\n  }, {\n    name: 'Utilities',\n    color: 'rgba(0, 196, 159, 0.8)',\n    amount: 500,\n    percentage: 12\n  }];\n  const categories = spendingCategories.length > 0 ? spendingCategories : defaultSpendingCategories;\n\n  // Calculate initial water level from net worth\n  useEffect(() => {\n    if (totalAssets > 0) {\n      const calculatedLevel = netWorth / totalAssets * 100;\n      setWaterLevel(Math.max(10, Math.min(90, calculatedLevel)));\n    }\n    // Determine rates from monthly income/expenses\n    setIncomeRate(Math.min(10, Math.ceil(monthlyIncome / 1000)));\n    setExpenseRate(Math.min(10, Math.ceil(monthlyExpenses / 1000)));\n\n    // Simulate water level changes\n    const interval = setInterval(() => {\n      setWaterLevel(prev => {\n        const change = (incomeRate - expenseRate) * 0.1;\n        const newLevel = prev + change;\n        return Math.min(Math.max(newLevel, 10), 90);\n      });\n    }, 2000);\n    return () => clearInterval(interval);\n  }, [totalAssets, netWorth, monthlyIncome, monthlyExpenses, incomeRate, expenseRate]);\n  return /*#__PURE__*/_jsxDEV(VisualizationContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Description, {\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReservoirWrapper, {\n      height: height,\n      children: [/*#__PURE__*/_jsxDEV(ReservoirWater, {\n        level: waterLevel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DamBlock, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(WaterOutflow, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }, this), showLegend && /*#__PURE__*/_jsxDEV(Legend, {\n      children: categories.map(category => /*#__PURE__*/_jsxDEV(LegendItem, {\n        color: category.color,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this), \" \", category.name, \": $\", category.amount]\n      }, category.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 19\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }, this), showMetrics && /*#__PURE__*/_jsxDEV(FinancialMetrics, {\n      children: [/*#__PURE__*/_jsxDEV(MetricCard, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Net Worth\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"$\", netWorth.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(MetricCard, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Total Assets\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"$\", totalAssets.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(MetricCard, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Total Liabilities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"$\", totalLiabilities.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(MetricCard, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Monthly Income\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"$\", monthlyIncome.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(MetricCard, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Monthly Expenses\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"$\", monthlyExpenses.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 7\n  }, this);\n};\n_s(DamVisualization, \"Qm2xJH4nhmIT+DXHwVC6zs6qMGc=\");\n_c12 = DamVisualization;\nexport default DamVisualization;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n$RefreshReg$(_c, \"VisualizationContainer\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"Description\");\n$RefreshReg$(_c4, \"ReservoirWrapper\");\n$RefreshReg$(_c5, \"ReservoirWater\");\n$RefreshReg$(_c6, \"DamBlock\");\n$RefreshReg$(_c7, \"WaterOutflow\");\n$RefreshReg$(_c8, \"Legend\");\n$RefreshReg$(_c9, \"LegendItem\");\n$RefreshReg$(_c10, \"FinancialMetrics\");\n$RefreshReg$(_c11, \"MetricCard\");\n$RefreshReg$(_c12, \"DamVisualization\");","map":{"version":3,"names":["React","useEffect","useState","styled","keyframes","jsxDEV","_jsxDEV","VisualizationContainer","div","_c","Title","h3","_c2","Description","p","_c3","ReservoirWrapper","props","height","_c4","ReservoirWater","level","_c5","DamBlock","_c6","flowDown","WaterOutflow","_c7","Legend","_c8","LegendItem","color","_c9","FinancialMetrics","_c10","MetricCard","_c11","DamVisualization","title","description","financialData","spendingCategories","showMetrics","showLegend","_s","waterLevel","setWaterLevel","incomeRate","setIncomeRate","expenseRate","setExpenseRate","totalAssets","totalLiabilities","netWorth","monthlyIncome","monthlyExpenses","defaultSpendingCategories","name","amount","percentage","categories","length","calculatedLevel","Math","max","min","ceil","interval","setInterval","prev","change","newLevel","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","map","category","toLocaleString","_c12","$RefreshReg$"],"sources":["/Users/luckyhappyfish/repos/Captial_One_Hack_Knight/finance-dam-visualizer-new/src/components/visualizations/DamVisualization.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled, { keyframes } from 'styled-components';\n\n//\n// -- Container & Basic Layout\n//\nconst VisualizationContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background: #16213e;\n  padding: 2rem;\n  border-radius: 16px;\n  margin-bottom: 2rem;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n  color: #fff;\n  width: 100%;\n`;\n\nconst Title = styled.h3`\n  margin-bottom: 1rem;\n  text-align: center;\n`;\n\nconst Description = styled.p`\n  color: #ccc;\n  text-align: center;\n  max-width: 800px;\n  margin-bottom: 2rem;\n`;\n\n//\n// -- Reservoir + Dam Visual\n//\nconst ReservoirWrapper = styled.div`\n  position: relative;\n  width: 80%;\n  max-width: 800px;\n  height: ${props => props.height}px;\n  margin-bottom: 2rem;\n  /* Potential background to illustrate land behind the reservoir */\n  background: linear-gradient(180deg, #1a1a2e 0%, #15213b 70%);\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.5);\n`;\n\n/**\n * The idea here is to create a container that has a shaped top edge (a “parabola” look).\n * We can do that with clip-path or an SVG approach. Below is a simple example with a clip-path\n * that might approximate a curved top. Adjust as desired.\n */\nconst ReservoirWater = styled.div`\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  /* We'll fill the bottom with water. The top is shaped with clip-path. */\n  height: ${props => props.level}%;\n  background: linear-gradient(\n    180deg,\n    rgba(0, 112, 240, 0.8) 0%,\n    rgba(72, 198, 239, 0.6) 100%\n  );\n  box-shadow: inset 0 2px 10px rgba(255, 255, 255, 0.2);\n  transition: height 1s ease-in-out;\n\n  /* A “parabola-like” shape for the top edge of the water */\n  clip-path: polygon(\n    0% 100%,\n    0% 10%,\n    50% 0%,    /* highest point in the center */\n    100% 10%,\n    100% 100%\n  );\n`;\n\n/**\n * This is the large block that acts as the “dam” on one side.\n * Position it absolutely on the right (or left) so it looks like it’s\n * holding back the water.\n */\nconst DamBlock = styled.div`\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  width: 60px;\n  height: 100%;\n  background: #555;\n  box-shadow: inset 0 0 10px rgba(0,0,0,0.6), 0 0 10px rgba(0,0,0,0.8);\n  border-top-left-radius: 12px;\n  border-bottom-left-radius: 12px;\n`;\n\n//\n// -- Water Flow Animation (vertical line)\n//\nconst flowDown = keyframes`\n  0% { height: 0; opacity: 0.8; }\n  50% { height: 80%; opacity: 1; }\n  100% { height: 0; opacity: 0; }\n`;\n\nconst WaterOutflow = styled.div`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  width: 6px;\n  background: rgba(0, 162, 255, 0.8);\n  border-radius: 3px;\n  animation: ${flowDown} 2s linear infinite;\n  transform: translateX(100%); /* push it to the right side of the dam */\n`;\n\n//\n// -- Legend + Metrics\n//\nconst Legend = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 1rem;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 12px;\n  padding: 1rem;\n  width: 100%;\n  margin-top: 1rem;\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 1rem;\n\n  span {\n    width: 12px;\n    height: 12px;\n    background: ${props => props.color};\n    margin-right: 8px;\n    display: inline-block;\n    border-radius: 3px;\n  }\n`;\n\nconst FinancialMetrics = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  width: 100%;\n  margin-top: 1rem;\n`;\n\nconst MetricCard = styled.div`\n  background: rgba(255, 255, 255, 0.1);\n  padding: 1rem;\n  border-radius: 12px;\n  margin: 0.5rem;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  width: 180px;\n  text-align: center;\n  backdrop-filter: blur(5px);\n  transition: all 0.3s ease;\n  \n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n  }\n  \n  h4 {\n    margin-top: 0;\n    font-size: 0.9rem;\n    font-weight: 500;\n    color: rgba(255, 255, 255, 0.7);\n  }\n  \n  p {\n    font-size: 1.3rem;\n    font-weight: 700;\n    margin-bottom: 0;\n    color: #fff;\n  }\n`;\n\n//\n// -- Main Component\n//\nconst DamVisualization = ({\n                            title = \"Financial Dam\",\n                            description = \"A stylized 2D reservoir with a dam and animated water outflow.\",\n                            financialData = {},\n                            spendingCategories = [],\n                            showMetrics = true,\n                            showLegend = true,\n                            height = 300\n                          }) => {\n  const [waterLevel, setWaterLevel] = useState(50);\n  const [incomeRate, setIncomeRate] = useState(5);\n  const [expenseRate, setExpenseRate] = useState(3);\n\n  // Extract financial metrics\n  const {\n    totalAssets = 100000,\n    totalLiabilities = 40000,\n    netWorth = totalAssets - totalLiabilities,\n    monthlyIncome = 5000,\n    monthlyExpenses = 3000\n  } = financialData;\n\n  // Default categories if none provided\n  const defaultSpendingCategories = [\n    { name: 'Housing', color: 'rgba(255, 128, 66, 0.8)', amount: 1200, percentage: 30 },\n    { name: 'Food', color: 'rgba(255, 187, 40, 0.8)', amount: 800, percentage: 20 },\n    { name: 'Transportation', color: 'rgba(136, 132, 216, 0.8)', amount: 400, percentage: 10 },\n    { name: 'Entertainment', color: 'rgba(0, 136, 254, 0.8)', amount: 300, percentage: 7 },\n    { name: 'Utilities', color: 'rgba(0, 196, 159, 0.8)', amount: 500, percentage: 12 }\n  ];\n\n  const categories = spendingCategories.length > 0\n      ? spendingCategories\n      : defaultSpendingCategories;\n\n  // Calculate initial water level from net worth\n  useEffect(() => {\n    if (totalAssets > 0) {\n      const calculatedLevel = (netWorth / totalAssets) * 100;\n      setWaterLevel(Math.max(10, Math.min(90, calculatedLevel)));\n    }\n    // Determine rates from monthly income/expenses\n    setIncomeRate(Math.min(10, Math.ceil(monthlyIncome / 1000)));\n    setExpenseRate(Math.min(10, Math.ceil(monthlyExpenses / 1000)));\n\n    // Simulate water level changes\n    const interval = setInterval(() => {\n      setWaterLevel(prev => {\n        const change = (incomeRate - expenseRate) * 0.1;\n        const newLevel = prev + change;\n        return Math.min(Math.max(newLevel, 10), 90);\n      });\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, [\n    totalAssets,\n    netWorth,\n    monthlyIncome,\n    monthlyExpenses,\n    incomeRate,\n    expenseRate\n  ]);\n\n  return (\n      <VisualizationContainer>\n        <Title>{title}</Title>\n        <Description>{description}</Description>\n\n        <ReservoirWrapper height={height}>\n          {/* The water level inside the reservoir */}\n          <ReservoirWater level={waterLevel} />\n\n          {/* The dam itself */}\n          <DamBlock />\n\n          {/* Animated water outflow on the dam side */}\n          <WaterOutflow />\n        </ReservoirWrapper>\n\n        {showLegend && (\n            <Legend>\n              {categories.map(category => (\n                  <LegendItem key={category.name} color={category.color}>\n                    <span /> {category.name}: ${category.amount}\n                  </LegendItem>\n              ))}\n            </Legend>\n        )}\n\n        {showMetrics && (\n            <FinancialMetrics>\n              <MetricCard>\n                <h4>Net Worth</h4>\n                <p>${netWorth.toLocaleString()}</p>\n              </MetricCard>\n              <MetricCard>\n                <h4>Total Assets</h4>\n                <p>${totalAssets.toLocaleString()}</p>\n              </MetricCard>\n              <MetricCard>\n                <h4>Total Liabilities</h4>\n                <p>${totalLiabilities.toLocaleString()}</p>\n              </MetricCard>\n              <MetricCard>\n                <h4>Monthly Income</h4>\n                <p>${monthlyIncome.toLocaleString()}</p>\n              </MetricCard>\n              <MetricCard>\n                <h4>Monthly Expenses</h4>\n                <p>${monthlyExpenses.toLocaleString()}</p>\n              </MetricCard>\n            </FinancialMetrics>\n        )}\n      </VisualizationContainer>\n  );\n};\n\nexport default DamVisualization;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}